# JBoss, Home of Professional Open Source.
# See the COPYRIGHT.txt file distributed with this work for information
# regarding copyright ownership. Some portions may be licensed
# to Red Hat, Inc. under one or more contributor license agreements.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.

General.MISSING_DATA_ROLE_NAME = A VDB data role requires a name.
General.MISSING_ENTRY_NAME = A VDB entry requires a name.
General.MISSING_ENTRY_PATH = A VDB entry requires a path.
General.MISSING_IMPORT_NAME = An Import VDB requires a name.
General.MISSING_MODEL_NAME = A VDB model requires a name.
General.MISSING_TRANSLATOR_NAME = A VDB translator requires a name.
General.MISSING_TRANSLATOR_TYPE = A VDB translator requires a type.
General.NAME_TYPE_DISPLAY={0} [{1}]

### VdbCommandProvider commands
AddDataRoleCommand.usage=add-data-role <role-name>
AddDataRoleCommand.help=\t{0} - creates a data role to a VDB.
AddDataRoleCommand.examples= \
\t add-data-role dataRoleToAdd
AddDataRoleCommand.DATA_ROLE_ADDED=Data Role "{0}" was successfully added.

AddEntryCommand.usage=add-entry <entry-name> <entry-path>
AddEntryCommand.help=\t{0} - creates a VDB entry.
AddEntryCommand.examples= \
\t add-entry entryToAdd entry.xml
AddEntryCommand.ENTRY_ADDED=VDB Entry "{0}" was successfully added.

AddImportCommand.usage=add-import <vdb-name>
AddImportCommand.help=\t{0} - creates a VDB import.
AddImportCommand.examples= \
\t add-import vdbImportToAdd
AddImportCommand.IMPORT_ADDED=VDB Import "{0}" was successfully added.

AddModelCommand.usage=add-model <model-name>
AddModelCommand.help=\t{0} - creates a VDB model.
AddModelCommand.examples= \
\t add-model modelToAdd
AddModelCommand.MODEL_ADDED=Model "{0}" was successfully added.

AddTranslatorCommand.usage=add-translator <translator-name>
AddTranslatorCommand.help=\t{0} - creates a VDB translator.
AddTranslatorCommand.examples= \
\t add-translator translatorToAdd oracle
AddTranslatorCommand.TRANSLATOR_ADDED=Translator "{0}" was successfully added.

DeleteDataRoleCommand.usage=delete-data-role <role-name>
DeleteDataRoleCommand.help=\t{0} - deletes a data role from a VDB.
DeleteDataRoleCommand.examples= \
\t delete-data-role dataRoleToDelete
DeleteDataRoleCommand.DATA_ROLE_DELETED=Data Role "{0}" was successfully deleted.

DeleteEntryCommand.usage=delete-entry <entry-name> <entry-path>
DeleteEntryCommand.help=\t{0} - deletes an entry from a VDB.
DeleteEntryCommand.examples= \
\t delete-entry entryToDelete
DeleteEntryCommand.ENTRY_DELETED=Entry "{0}" was successfully deleted.

DeleteImportCommand.usage=delete-import <vdb-name>
DeleteImportCommand.help=\t{0} - deletes a VDB import.
DeleteImportCommand.examples= \
\t delete-import vdbImportToDelete
DeleteImportCommand.IMPORT_DELETED=VDB Import "{0}" was successfully deleted.

DeleteModelCommand.usage=delete-model <model-name>
DeleteModelCommand.help=\t{0} - deletes a VDB model.
DeleteModelCommand.examples= \
\t delete-model modelToDelete
DeleteModelCommand.MODEL_DELETED=Model "{0}" was successfully deleted.

DeleteTranslatorCommand.usage=delete-translator <translator-name>
DeleteTranslatorCommand.help=\t{0} - deletes a VDB translator.
DeleteTranslatorCommand.examples= \
\t delete-translator translatorToDelete
DeleteTranslatorCommand.TRANSLATOR_DELETED=Translator "{0}" was successfully deleted.

ExportCommand.usage=export-vdb <file-path> [override]
ExportCommand.help=\t{0} - exports a VDB manifest to a local file.
ExportCommand.examples= \
\t export-vdb /Users/me/myVdb.xml \n \
\t export-vdb /Users/me/myVdb.xml -o \n \
\t export-vdb /Users/me/myVdb.xml --overwrite
ExportCommand.OverwriteArgInvalid = "{0}" is not a valid overwrite option.
ExportCommand.FileExistsOverwriteDisabled = File with name "{0}" exists - an overwrite option must be supplied.  Run "help export-vdb" for overwrite options.
ExportCommand.VDB_EXPORTED = VDB "{0}" was successfully exported to "{1}" with override flag of "{2}"

SetVdbPropertyCommand.usage=set-property <property-name> <new-value>
SetVdbPropertyCommand.help=\t{0} - sets a VDB property value.
SetVdbPropertyCommand.examples= \
\t set-property preview true

ShowDataRolesCommand.usage=show-data-roles
ShowDataRolesCommand.help=\t{0} - lists the data roles defined in a VDB.
ShowDataRolesCommand.examples= \
\t show-data-roles
ShowDataRolesCommand.NO_DATA_ROLES = There are no data roles defined in VDB "{0}".
ShowDataRolesCommand.DATA_ROLES_HEADER = Data roles in VDB "{0}": \n

ShowEntriesCommand.usage=show-entries
ShowEntriesCommand.help=\t{0} - lists the entries in a VDB entry.
ShowEntriesCommand.examples= \
\t show-entries
ShowEntriesCommand.NO_ENTRIES = There are no entries defined in VDB "{0}".
ShowEntriesCommand.ENTRIES_HEADER = Entries in VDB "{0}": \n

ShowImportsCommand.usage=show-imports
ShowImportsCommand.help=\t{0} - lists the VDBs imported by a VDB.
ShowImportsCommand.examples= \
\t show-imports
ShowImportsCommand.NO_IMPORTS = There are no VDB imports defined in VDB "{0}".
ShowImportsCommand.IMPORTS_HEADER = VDB imports in VDB "{0}": \n

ShowModelsCommand.usage=show-models
ShowModelsCommand.help=\t{0} - lists the models in a VDB.
ShowModelsCommand.examples= \
\t show-models
ShowModelsCommand.NO_MODELS = There are no models defined in VDB "{0}".
ShowModelsCommand.MODELS_HEADER = Models in VDB "{0}": \n

ShowTranslatorsCommand.usage=show-translators
ShowTranslatorsCommand.help=\t{0} - lists the translators in a VDB.
ShowTranslatorsCommand.examples= \
\t show-translators
ShowTranslatorsCommand.NO_TRANSLATORS = There are no translators defined in VDB "{0}".
ShowTranslatorsCommand.TRANSLATORS_HEADER = Translators in VDB "{0}": \n

ShowVdbCommand.usage=show-vdb
ShowVdbCommand.help=\t{0} - displays the complete state of a VDB.
ShowVdbCommand.examples= \
\t show-vdb

UnsetVdbPropertyCommand.examples = \
\t unset-property version
UnsetVdbPropertyCommand.usage = unset-property <property-name>
UnsetVdbPropertyCommand.help=\t{0} - either removes the VDB property or sets it back to its default value.

ShowVdbPropertiesCommand.usage=show-vdb-properties
ShowVdbPropertiesCommand.help=\t{0} - displays all the VDB properties.
ShowVdbPropertiesCommand.examples= \
\t show-vdb-properties

UploadModelCommand.usage=upload-model <model-name> <model-type> <local-file-path> [-o | --overwrite]
UploadModelCommand.help=\t{0} - uploads a *.ddl file whose content is the model ddl.
UploadModelCommand.examples= \
\t upload-model myModel PHYSICAL /path/to/model/file.ddl \n \
\t upload-model myModel VIRTUAL /path/to/model/file.ddl -o \n \
\t upload-model myModel PHYSICAL /path/to/model/file.ddl --overwrite
UploadModelCommand.INVALID_OVERWRITE_ARG = The "{0}" argument is not a valid. Run "help upload-model" to see the command usage.
UploadModelCommand.MISSING_INPUT_MODEL_FILE_PATH = The local file path of the DDL file is required when uploading a Model.
UploadModelCommand.MISSING_MODEL_NAME = A Model name is required when uploading a Model ddl file.
UploadModelCommand.MISSING_MODEL_TYPE = A Model type is required when uploading a Model ddl file.
UploadModelCommand.MODEL_TYPE_ERROR = The supplied Model Type "{0}" is invalid.
UploadModelCommand.MODEL_INPUT_FILE_IS_EMPTY = The "{0}" could not be uploaded because it was not found.
UploadModelCommand.MODEL_OVERWRITE_DISABLED = The "{0}" Model DDL file could not be uploaded because a Model with name "{1}" already exists. Run "help upload-model" for overwrite options.
UploadModelCommand.MODEL_UPLOADED = Model "{0}" was successfully uploaded.

