/* Generated By:JJTree: Do not edit this line. FromClause.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.komodo.modeshape.teiid.sql.lang;

import java.util.Collection;
import org.komodo.modeshape.teiid.parser.TeiidSeqParser;
import org.komodo.modeshape.teiid.parser.SQLanguageVisitorImpl;
import org.komodo.modeshape.teiid.parser.TeiidNodeFactory.ASTNodes;
import org.komodo.modeshape.teiid.parser.TeiidSQLConstants;
import org.komodo.modeshape.teiid.sql.symbol.GroupSymbolImpl;
import org.komodo.spi.lexicon.TeiidSqlLexicon;
import org.komodo.spi.query.sql.lang.FromClause;

/**
 * A FromClause is an interface for subparts held in a FROM clause.  One 
 * type of FromClause is {@link UnaryFromClauseImpl}, which is the more common 
 * use and represents a single group.  Another, less common type of FromClause
 * is the {@link JoinPredicateImpl} which represents a join between two FromClauses
 * and may contain criteria.
 */
public abstract class FromClauseImpl extends ASTNode
    implements FromClause<SQLanguageVisitorImpl>, TeiidSQLConstants.Reserved {

    /**
     * @param p teiid parser
     * @param id node type id
     */
    public FromClauseImpl(TeiidSeqParser p, int id) {
        super(p, id);
    }

    /**
     * @return whether any hints set
     */
    public boolean hasHint() {
        MakeDep makeDep = getMakeDependency();
        return isOptional() || isMakeInd() || (makeDep != null && makeDep.isSimple()) || isMakeNotDep() || isNoUnnest() || isPreserve();
    }

    @Override
    public boolean isOptional() {
        Object property = getProperty(TeiidSqlLexicon.FromClause.OPTIONAL_PROP_NAME);
        return property == null ? false : Boolean.parseBoolean(property.toString());
    }
    
    @Override
    public void setOptional(boolean optional) {
        setProperty(TeiidSqlLexicon.FromClause.OPTIONAL_PROP_NAME, optional);
    }
    
    /**
     * @return make ind flag
     */
    public boolean isMakeInd() {
        Object property = getProperty(TeiidSqlLexicon.FromClause.MAKE_IND_PROP_NAME);
        return property == null ? false : Boolean.parseBoolean(property.toString());
    }
    
    /**
     * @param makeInd value
     */
    public void setMakeInd(boolean makeInd) {
        setProperty(TeiidSqlLexicon.FromClause.MAKE_IND_PROP_NAME, makeInd);
    }

    /**
     * @return no unnest flag
     */
    public boolean isNoUnnest() {
        Object property = getProperty(TeiidSqlLexicon.FromClause.NO_UNNEST_PROP_NAME);
        return property == null ? false : Boolean.parseBoolean(property.toString());
    }

    /**
     * @param noUnnest value
     */
    public void setNoUnnest(boolean noUnnest) {
        setProperty(TeiidSqlLexicon.FromClause.NO_UNNEST_PROP_NAME, noUnnest);
    }

    @Override
    public boolean isMakeDep() {
        return getMakeDependency() != null;
    }

    @Override
    public void setMakeDep(boolean makeDep) {
        if (makeDep) {
            if (getMakeDependency() == null) {
                MakeDep makeDependency = getTeiidParser().createASTNode(ASTNodes.MAKE_DEP);
                setMakeDependency(makeDependency);
            }
        } else {
            removeChildren(TeiidSqlLexicon.FromClause.MAKE_DEPENDENCY_REF_NAME);
        }
    }

    /**
     * @return MakeDep
     */
    public MakeDep getMakeDependency() {
        return getChildforIdentifierAndRefType(TeiidSqlLexicon.FromClause.MAKE_DEPENDENCY_REF_NAME, MakeDep.class);
    }

    /**
     * @param makeDep value
     */
    public void setMakeDependency(MakeDep makeDep) {
        setChild(TeiidSqlLexicon.FromClause.MAKE_DEPENDENCY_REF_NAME, makeDep);
    }

    @Override
    public boolean isMakeNotDep() {
        Object property = getProperty(TeiidSqlLexicon.FromClause.MAKE_NOT_DEP_PROP_NAME);
        return property == null ? false : Boolean.parseBoolean(property.toString());
    }

    @Override
    public void setMakeNotDep(boolean makeNotDep) {
        setProperty(TeiidSqlLexicon.FromClause.MAKE_NOT_DEP_PROP_NAME, makeNotDep);
    }
    
    /**
     * @return preserve flag
     */
    public boolean isPreserve() {
        Object property = getProperty(TeiidSqlLexicon.FromClause.PRESERVE_PROP_NAME);
        return property == null ? false : Boolean.parseBoolean(property.toString());
    }
    
    /**
     * @param preserve value
     */
    public void setPreserve(boolean preserve) {
        setProperty(TeiidSqlLexicon.FromClause.PRESERVE_PROP_NAME, preserve);
    }

    /**
     * @param groups value
     */
    public abstract void collectGroups(Collection<GroupSymbolImpl> groups);

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.getMakeDependency() == null ? 0 : this.getMakeDependency().hashCode());
        result = prime * result + (this.isMakeInd() ? 1231 : 1237);
        result = prime * result + (this.isMakeNotDep() ? 1231 : 1237);
        result = prime * result + (this.isNoUnnest() ? 1231 : 1237);
        result = prime * result + (this.isOptional() ? 1231 : 1237);
        result = prime * result + (this.isPreserve() ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        FromClauseImpl other = (FromClauseImpl)obj;

        if (this.getMakeDependency() != other.getMakeDependency()) return false;
        if (this.isMakeInd() != other.isMakeInd()) return false;
        if (this.isMakeNotDep() != other.isMakeNotDep()) return false;
        if (this.isNoUnnest() != other.isNoUnnest()) return false;
        if (this.isOptional() != other.isOptional()) return false;
        if (this.isPreserve() != other.isPreserve()) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(SQLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public abstract FromClauseImpl clone();

}
/* JavaCC - OriginalChecksum=908130697ce6a37a6c778dfefda987bb (do not edit this line) */
