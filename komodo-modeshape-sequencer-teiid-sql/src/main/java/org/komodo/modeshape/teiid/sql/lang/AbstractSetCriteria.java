/* Generated By:JJTree: Do not edit this line. AbstractSetCriteria.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=TeiidNodeFactory,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.komodo.modeshape.teiid.sql.lang;

import org.komodo.modeshape.teiid.parser.SQLanguageVisitorImpl;
import org.komodo.modeshape.teiid.parser.TeiidSeqParser;
import org.komodo.modeshape.teiid.sql.symbol.BaseExpression;
import org.komodo.spi.lexicon.TeiidSqlLexicon;

/**
 *
 */
public abstract class AbstractSetCriteria extends CriteriaImpl implements PredicateCriteria {

    /**
     * @param p teiid parser
     * @param id node type id
     */
    public AbstractSetCriteria(TeiidSeqParser p, int id) {
        super(p, id);
    }

    /**
     * @return the expression
     */
    public BaseExpression getExpression() {
        return getChildforIdentifierAndRefType(TeiidSqlLexicon.AbstractSetCriteria.EXPRESSION_REF_NAME, BaseExpression.class);
    }

    /**
     * @param expression the expression to set
     */
    public void setExpression(BaseExpression expression) {
        setChild(TeiidSqlLexicon.AbstractSetCriteria.EXPRESSION_REF_NAME, expression);
    }

    /**
     * Returns whether this criteria is negated.
     * @return flag indicating whether this criteria contains a NOT
     */
    public boolean isNegated() {
        Object property = getProperty(TeiidSqlLexicon.AbstractSetCriteria.NEGATED_PROP_NAME);
        return property == null ? false : Boolean.parseBoolean(property.toString());
    }

    /**
     * Sets the negation flag for this criteria.
     * @param negationFlag true if this criteria contains a NOT; false otherwise
     */
    public void setNegated(boolean negationFlag) {
        setProperty(TeiidSqlLexicon.AbstractSetCriteria.NEGATED_PROP_NAME, negationFlag);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.getExpression() == null) ? 0 : this.getExpression().hashCode());
        result = prime * result + (this.isNegated() ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        AbstractSetCriteria other = (AbstractSetCriteria)obj;
        if (this.getExpression() == null) {
            if (other.getExpression() != null) return false;
        } else if (!this.getExpression().equals(other.getExpression())) return false;
        if (this.isNegated() != other.isNegated()) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(SQLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }
}
/* JavaCC - OriginalChecksum=b5f13c38d099fca361ab8d2d92744d6a (do not edit this line) */
