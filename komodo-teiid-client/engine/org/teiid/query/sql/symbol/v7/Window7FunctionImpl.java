/* Generated By:JJTree: Do not edit this line. WindowFunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=TeiidNodeFactory,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.symbol.v7;

import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.v7.Teiid7ClientParser;
import org.teiid.query.sql.symbol.BaseAggregateSymbol;
import org.teiid.query.sql.symbol.SymbolImpl;
import org.teiid.query.sql.symbol.BaseWindowFunction;
import org.teiid.query.sql.symbol.WindowSpecificationImpl;

/**
 * From Teiid Version 7, the WindowFunction extends Symbol.
 * This is changed in version 8.
 */
public class Window7FunctionImpl extends SymbolImpl implements BaseWindowFunction {

    private BaseAggregateSymbol function;

    private WindowSpecificationImpl windowSpecification;

    /**
     * @param p
     * @param id
     */
    public Window7FunctionImpl(Teiid7ClientParser p, int id) {
        super(p, id);
    }

    /**
     * @return the function
     */
    @Override
    public BaseAggregateSymbol getFunction() {
        return this.function;
    }

    /**
     * @param function the function to set
     */
    @Override
    public void setFunction(BaseAggregateSymbol function) {
        this.function = function;
        this.function.setWindowed(true);
    }

    /**
     * @return the windowSpecification
     */
    @Override
    public WindowSpecificationImpl getWindowSpecification() {
        return this.windowSpecification;
    }

    /**
     * @param windowSpecification the windowSpecification to set
     */
    @Override
    public void setWindowSpecification(WindowSpecificationImpl windowSpecification) {
        this.windowSpecification = windowSpecification;
    }

    @Override
    public Class<?> getType() {
        return function.getType();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.function == null) ? 0 : this.function.hashCode());
        result = prime * result + ((this.windowSpecification == null) ? 0 : this.windowSpecification.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        Window7FunctionImpl other = (Window7FunctionImpl)obj;
        if (this.function == null) {
            if (other.function != null) return false;
        } else if (!this.function.equals(other.function)) return false;
        if (this.windowSpecification == null) {
            if (other.windowSpecification != null) return false;
        } else if (!this.windowSpecification.equals(other.windowSpecification)) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public Window7FunctionImpl clone() {
        Window7FunctionImpl clone = new Window7FunctionImpl((Teiid7ClientParser) this.parser, this.id);

        if(getFunction() != null)
            clone.setFunction(getFunction().clone());
        if(getWindowSpecification() != null)
            clone.setWindowSpecification(getWindowSpecification().clone());
        if(getShortCanonicalName() != null)
            clone.setShortCanonicalName(getShortCanonicalName());
        if(getOutputName() != null)
            clone.setOutputName(getOutputName());
        if(getShortName() != null)
            clone.setShortName(getShortName());
        if(getName() != null)
            clone.setName(getName());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=da43cffa8d1927cfd8b4f378cdcfeae0 (do not edit this line) */
