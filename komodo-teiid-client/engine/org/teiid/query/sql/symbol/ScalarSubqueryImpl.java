/* Generated By:JJTree: Do not edit this line. ScalarSubquery.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.symbol;

import org.komodo.spi.query.sql.symbol.ScalarSubquery;
import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.TeiidClientParser;
import org.teiid.query.sql.lang.QueryCommandImpl;
import org.teiid.query.sql.lang.SimpleNode;
import org.teiid.query.sql.lang.BaseSubqueryContainer;

/**
 *
 */
public class ScalarSubqueryImpl extends SimpleNode
    implements BaseExpression, BaseSubqueryContainer<QueryCommandImpl>, ScalarSubquery<TCLanguageVisitorImpl, QueryCommandImpl> {

    private QueryCommandImpl command;

    private Class<?> type;

    /**
     * @param p
     * @param id
     */
    public ScalarSubqueryImpl(TeiidClientParser p, int id) {
        super(p, id);
    }

    /**
     * @return the command
     */
    @Override
    public QueryCommandImpl getCommand() {
        return command;
    }

    /**
     * @param command the command to set
     */
    @Override
    public void setCommand(QueryCommandImpl command) {
        this.command = command;
    }

    @Override
    public Class<?> getType() {
        if (this.type == null){
            BaseExpression symbol = this.command.getProjectedSymbols().iterator().next();
            this.type = symbol.getType();
        }
        //may still be null if this.command wasn't resolved
        return this.type;
    }

    /**
     * Set type of ScalarSubquery
     * @param type New type
     */
    public void setType(Class<?> type) {
        this.type = type;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.command == null) ? 0 : this.command.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        ScalarSubqueryImpl other = (ScalarSubqueryImpl)obj;
        if (this.command == null) {
            if (other.command != null) return false;
        } else if (!this.command.equals(other.command)) return false;
        if (this.type == null) {
            if (other.type != null) return false;
        } else if (!this.type.equals(other.type)) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public ScalarSubqueryImpl clone() {
        ScalarSubqueryImpl clone = new ScalarSubqueryImpl(this.parser, this.id);

        if(getType() != null)
            clone.setType(getType());
        if(getCommand() != null)
            clone.setCommand(getCommand().clone());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=bfe243691ae4c256b98aff43709faeed (do not edit this line) */
