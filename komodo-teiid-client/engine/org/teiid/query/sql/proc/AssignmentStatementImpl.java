/* Generated By:JJTree: Do not edit this line. AssignmentStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.proc;

import org.komodo.spi.query.sql.proc.AssignmentStatement;
import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.TeiidNodeFactory.ASTNodes;
import org.teiid.query.parser.TeiidClientParser;
import org.teiid.query.sql.lang.CommandImpl;
import org.teiid.query.sql.lang.QueryImpl;
import org.teiid.query.sql.lang.QueryCommandImpl;
import org.teiid.query.sql.symbol.ElementSymbolImpl;
import org.teiid.query.sql.symbol.BaseExpression;
import org.teiid.query.sql.symbol.ScalarSubqueryImpl;

/**
 *
 */
public class AssignmentStatementImpl extends StatementImpl implements BaseExpressionStatement, AssignmentStatement<BaseExpression, TCLanguageVisitorImpl> {

    // the variable to which a value is assigned
    private ElementSymbolImpl variable;
    private BaseExpression value;
    private CommandImpl command;

    /**
     * @param p
     * @param id
     */
    public AssignmentStatementImpl(TeiidClientParser p, int id) {
        super(p, id);
    }

    /**
     * Return the type for this statement, this is one of the types
     * defined on the statement object.
     * @return The type of this statement
     */
    @Override
    public StatementType getType() {
        return StatementType.TYPE_ASSIGNMENT;
    }

    /**
     * @return command
     */
    @Deprecated
    public CommandImpl getCommand() {
        if (command != null) {
            return command;
        }
        if (value instanceof ScalarSubqueryImpl && ((ScalarSubqueryImpl)value).getCommand() instanceof QueryImpl) {
            QueryImpl query = (QueryImpl)((ScalarSubqueryImpl)value).getCommand();
            if (query.getInto() != null) {
                return query;
            }
        }
        return null;
    }

    /**
     * @param command
     */
    public void setCommand(CommandImpl command) {
        if (command instanceof QueryCommandImpl) {
            ScalarSubqueryImpl ssq = parser.createASTNode(ASTNodes.SCALAR_SUBQUERY);
            ssq.setCommand((QueryCommandImpl) command);
            this.value = ssq;
        } else
            this.command = command;
    }

    /**
     * @see #getExpression()
     */
    @Override
    @Deprecated
    public BaseExpression getValue() {
        return value;
    }

    /**
     * @see #setExpression(BaseExpression)
     */
    @Override
    @Deprecated
    public void setValue(BaseExpression value) {
        this.value = value;
    }

    @Override
    public BaseExpression getExpression() {
        return this.value;
    }

    /**
     * @param expression
     */
    public void setExpression(BaseExpression expression) {
        this.value = expression;
    }

    /**
     * Get the expression giving the value that is assigned to the variable.
     * @return An <code>Expression</code> with the value
     */
    @Override
    public ElementSymbolImpl getVariable() {
        return this.variable;
    }
    
    /**
     * Set the variable that is assigned to the value
     *
     * @param variable <code>ElementSymbol</code> that is being assigned
     */
    public void setVariable(ElementSymbolImpl variable) {
        this.variable = variable;
    }   

    @Override
    public Class<?> getExpectedType() {
        if (this.variable == null) {
            return null;
        }
        return this.variable.getType();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.command == null) ? 0 : this.command.hashCode());
        result = prime * result + ((this.value == null) ? 0 : this.value.hashCode());
        result = prime * result + ((this.variable == null) ? 0 : this.variable.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        AssignmentStatementImpl other = (AssignmentStatementImpl)obj;
        if (this.command == null) {
            if (other.command != null) return false;
        } else if (!this.command.equals(other.command)) return false;
        if (this.value == null) {
            if (other.value != null) return false;
        } else if (!this.value.equals(other.value)) return false;
        if (this.variable == null) {
            if (other.variable != null) return false;
        } else if (!this.variable.equals(other.variable)) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public AssignmentStatementImpl clone() {
        AssignmentStatementImpl clone = new AssignmentStatementImpl(this.parser, this.id);

        if(getExpression() != null)
            clone.setExpression(getExpression().clone());
        if(getCommand() != null)
            clone.setCommand(getCommand().clone());
        if(getVariable() != null)
            clone.setVariable(getVariable().clone());
        if(getValue() != null)
            clone.setValue(getValue().clone());

        return clone;
    }

}
/* JavaCC - OriginalChecksum=9d8e32dbc35c1c90feaec305fa14473f (do not edit this line) */
