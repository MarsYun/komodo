/* Generated By:JJTree: Do not edit this line. From.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang;

import java.util.ArrayList;
import java.util.List;

import org.komodo.spi.query.sql.lang.From;
import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.TeiidNodeFactory.ASTNodes;
import org.teiid.query.parser.TeiidClientParser;
import org.teiid.query.sql.symbol.GroupSymbolImpl;

/**
 *
 */
public class FromImpl extends SimpleNode
    implements From<FromClauseImpl, GroupSymbolImpl, TCLanguageVisitorImpl> {

    private List<FromClauseImpl> clauses;

    /**
     * @param p
     * @param id
     */
    public FromImpl(TeiidClientParser p, int id) {
        super(p, id);
    }

    /** 
     * Get all the clauses in FROM
     * @return List of {@link FromClauseImpl}
     */
    @Override
    public List<FromClauseImpl> getClauses() {
        return this.clauses;
    }
    
    /** 
     * Set all the clauses
     * @param clauses List of {@link FromClauseImpl}
     */
    @Override
    public void setClauses(List<? extends FromClauseImpl> clauses) {
        if (clauses == null) {
            this.clauses = null;
            return;
        }

        this.clauses = new ArrayList<FromClauseImpl>( clauses );
    }

    /**
     * Add a from clause to this {@link FromImpl}
     * @param clause
     */
    @Override
    public void addClause(FromClauseImpl clause) {
        if (this.clauses == null)
            this.clauses = new ArrayList<FromClauseImpl>();

        this.clauses.add(clause);
    }

    /**
     * Adds a new group to the list (it will be wrapped in a UnaryFromClause)
     * @param group Group to add
     */
    @Override
    public void addGroup( GroupSymbolImpl group ) {
        if( group == null )
            return;

        UnaryFromClauseImpl unaryFromClause = parser.createASTNode(ASTNodes.UNARY_FROM_CLAUSE);
        unaryFromClause.setGroup(group);
        addClause(unaryFromClause);
    }  

    @Override
    public List<GroupSymbolImpl> getGroups() {
        List<GroupSymbolImpl> groups = new ArrayList<GroupSymbolImpl>();
        if(clauses != null) {
            for(int i=0; i<clauses.size(); i++) {
                FromClauseImpl clause = clauses.get(i);
                clause.collectGroups(groups);
            }
        }
            
        return groups;
    }

    @Override
    public boolean containsGroup(GroupSymbolImpl group) {
        return getGroups().contains(group);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((this.clauses == null) ? 0 : this.clauses.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        FromImpl other = (FromImpl)obj;
        if (this.clauses == null) {
            if (other.clauses != null) return false;
        } else if (!this.clauses.equals(other.clauses)) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public FromImpl clone() {
        FromImpl clone = new FromImpl(this.parser, this.id);

        if(getClauses() != null)
            clone.setClauses(cloneList(getClauses()));

        return clone;
    }
}
/* JavaCC - OriginalChecksum=ae9ea7eb99f07c1bca94932f9265c796 (do not edit this line) */
