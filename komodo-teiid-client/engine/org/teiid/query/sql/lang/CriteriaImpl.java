/* Generated By:JJTree: Do not edit this line. Criteria.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.komodo.spi.query.sql.lang.CompoundCriteria;
import org.komodo.spi.query.sql.lang.Criteria;
import org.teiid.core.types.DefaultDataTypeManager;
import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.TeiidClientParser;
import org.teiid.query.sql.symbol.BaseExpression;

/**
 *
 */
public class CriteriaImpl extends SimpleNode implements BaseExpression, Criteria<TCLanguageVisitorImpl> {

    /**
     * @param p
     * @param id
     */
    public CriteriaImpl(TeiidClientParser p, int id) {
        super(p, id);
    }

    @Override
    public Class<?> getType() {
        return DefaultDataTypeManager.DefaultDataTypes.BOOLEAN.getTypeClass();
    }

    /**
     * Helper method for {@link #separateCriteriaByAnd(CriteriaImpl)} that 
     * can be called recursively to collect parts.
     * @param crit Crit to break apart
     * @param parts Collection to add parts to
     */
    private static void separateCriteria(CriteriaImpl crit, Collection<CriteriaImpl> parts) {
        if(crit instanceof CompoundCriteriaImpl) {
            CompoundCriteriaImpl compCrit = (CompoundCriteriaImpl) crit;
            if(compCrit.getOperator() == CompoundCriteria.AND) {
                for (CriteriaImpl conjunct : compCrit.getCriteria()) {
                    separateCriteria(conjunct, parts);
                }
            } else {
                parts.add(crit);    
            }
        } else {
            parts.add(crit);        
        }   
    }

    /**
     * This utility method will pull apart a tree of criteria by breaking all
     * compound AND criteria apart.  For instance, ((A=1 AND B=2) AND C=3) 
     * will be broken into A=1, B=2, C=3.  
     * @param crit Criteria to break apart
     * @return List of Criteria, empty list if crit is null
     */     
    public static List<CriteriaImpl> separateCriteriaByAnd(CriteriaImpl crit) {
        if(crit == null) { 
            return Collections.emptyList();
        }
        
        List<CriteriaImpl> parts = new ArrayList<CriteriaImpl>();
        separateCriteria(crit, parts);
        return parts;           
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public CriteriaImpl clone() {
        CriteriaImpl clone = new CriteriaImpl(this.parser, this.id);


        return clone;
    }

}
/* JavaCC - OriginalChecksum=d76fcc28dd6818ea751c44825b2d1060 (do not edit this line) */
