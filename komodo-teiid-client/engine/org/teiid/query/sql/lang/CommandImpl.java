/* Generated By:JJTree: Do not edit this line. Command.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.komodo.spi.query.sql.lang.Command;
import org.komodo.spi.runtime.version.DefaultTeiidVersion.Version;
import org.teiid.core.types.DefaultDataTypeManager;
import org.teiid.query.metadata.TempMetadataStore;
import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.TeiidNodeFactory.ASTNodes;
import org.teiid.query.parser.TeiidClientParser;
import org.teiid.query.sql.symbol.ElementSymbolImpl;
import org.teiid.query.sql.symbol.BaseExpression;
import org.teiid.query.sql.symbol.GroupSymbolImpl;
import org.teiid.query.sql.util.SymbolMap;
import org.teiid.query.sql.visitor.CommandCollectorVisitorImpl;

/**
 *
 */
public abstract class CommandImpl extends SimpleNode implements Command<BaseExpression, TCLanguageVisitorImpl>{

    private static List<BaseExpression> updateCommandSymbol;

    /** The option clause */
    private OptionImpl option;

    private SourceHintImpl sourceHint;

    private boolean isResolved;

    private transient GroupContextImpl externalGroups;

    private SymbolMap correlatedReferences;

    /**
     * All temporary group IDs discovered while resolving this 
     * command.  The key is a TempMetadataID and the value is an 
     * ordered List of TempMetadataID representing the elements.
     */
    protected TempMetadataStore tempGroupIDs;

    /**
     * @param p
     * @param id
     */
    public CommandImpl(TeiidClientParser p, int id) {
        super(p, id);
    }

    /**
     * Get the option clause for the query.
     * @return option clause
     */
    @Override
    public OptionImpl getOption() {
        return option;
    }
    
    /**
     * Set the option clause for the query.
     * @param option New option clause
     */
    public void setOption(OptionImpl option) {
        this.option = option;
    }

    /**
     * @return the sourceHint
     */
    public SourceHintImpl getSourceHint() {
        return sourceHint;
    }

    /**
     * @return whether this object returns a result set
     */
    public boolean returnsResultSet() {
        return false;
    }

    /**
     * @return null if unknown, empty if results are not returned, or the resultset columns
     */
    @Override
    public List<? extends BaseExpression> getResultSetColumns() {
        if (returnsResultSet() || parser.getVersion().isLessThan(Version.TEIID_8_0.get())) {
            return getProjectedSymbols();
        }
        return Collections.emptyList();
    }

    /**
     * @param sourceHint the sourceHint to set
     */
    public void setSourceHint(SourceHintImpl sourceHint) {
        this.sourceHint = sourceHint;
    }

    /**
     * Indicates whether this command has been resolved or not - 
     * attempting to resolve a command that has already been resolved
     * has undefined results.  Also, caution should be taken in modifying
     * a command which has already been resolved, as it could result in
     * adding unresolved components to a supposedly resolved command.
     * @return whether this command is resolved or not.
     */
    @Override
    public boolean isResolved() {
        return this.isResolved;
    }

    /**
     * This command is intended to only be used by the QueryResolver.
     * @param isResolved whether this command is resolved or not
     */
    public void setIsResolved(boolean isResolved) {
        this.isResolved = isResolved;
    }

    /**
     * @return singleton update symbol which is lazily created
     */
    public List<BaseExpression> getUpdateCommandSymbol() {
        if (updateCommandSymbol == null ) {
            ElementSymbolImpl symbol = parser.createASTNode(ASTNodes.ELEMENT_SYMBOL);
            symbol.setName("Count"); //$NON-NLS-1$
            symbol.setType(DefaultDataTypeManager.DefaultDataTypes.INTEGER.getTypeClass());
            updateCommandSymbol = Arrays.asList((BaseExpression)symbol);
        }
        return updateCommandSymbol;
    }

    protected void copyMetadataState(CommandImpl copy) {
        if(this.getExternalGroupContexts() != null) {
            copy.externalGroups = (GroupContextImpl)this.externalGroups.clone();
        }
        if(this.tempGroupIDs != null) {
            copy.setTemporaryMetadata(this.tempGroupIDs.clone());
        }
        
        copy.setIsResolved(this.isResolved());

        if (this.correlatedReferences != null) {
            copy.correlatedReferences = this.correlatedReferences.clone();
        }
        if(this.getOption() != null) { 
            copy.setOption(this.getOption().clone());
        }

        copy.sourceHint = this.sourceHint;
    }

    /**
     * @return temporary group ids
     */
    public TempMetadataStore getTemporaryMetadata() {
        return this.tempGroupIDs;
    }

    /**
     * @param metadata
     */
    public void setTemporaryMetadata(TempMetadataStore metadata) {
        this.tempGroupIDs = metadata;
    }

    /**
     * @param group
     */
    public void addExternalGroupToContext(GroupSymbolImpl group) {
        getExternalGroupContexts().addGroup(group);
    }

    /**
     * @param groups
     */
    public void addExternalGroupsToContext(Collection<GroupSymbolImpl> groups) {
        getExternalGroupContexts().getGroups().addAll(groups);
    }

    /**
     * @param root
     */
    public void setExternalGroupContexts(GroupContextImpl root) {
        if (root == null) {
            this.externalGroups = null;
        } else {
            this.externalGroups = (GroupContextImpl)root.clone();
        }
    }
    
    /**
     * @param groups
     */
    public void pushNewResolvingContext(Collection<GroupSymbolImpl> groups) {
        externalGroups = new GroupContextImpl(externalGroups, new LinkedList<GroupSymbolImpl>(groups));
    }

    /**
     * @return external groups
     */
    public GroupContextImpl getExternalGroupContexts() {
        if (externalGroups == null) {
            this.externalGroups = new GroupContextImpl();
        }
        return this.externalGroups;
    }
    
    /**
     * @return external groups
     */
    public List<GroupSymbolImpl> getAllExternalGroups() {
        if (externalGroups == null) {
            return Collections.emptyList();
        }
        
        return externalGroups.getAllGroups();
    }

    /**
     * Helper method to print command tree at given tab level
     * @param str String buffer to add command sub tree to
     * @param tabLevel Number of tabs to print this command at
     */
    protected void printCommandTree(StringBuffer str, int tabLevel) {
        // Add tabs
        for(int i=0; i<tabLevel; i++) {
            str.append("\t"); //$NON-NLS-1$
        }
        
        // Add this command
        str.append(toString());
        str.append("\n"); //$NON-NLS-1$

        // Add children recursively
        tabLevel++;
        for (CommandImpl subCommand : CommandCollectorVisitorImpl.getCommands(this)) {
            subCommand.printCommandTree(str, tabLevel);
        }
    }

    /**
     * Print the full tree of commands with indentation - useful for debugging
     * @return String String representation of command tree
     */
    public String printCommandTree() {
        StringBuffer str = new StringBuffer();
        printCommandTree(str, 0);
        return str.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.isResolved ? 1231 : 1237);
        result = prime * result + ((this.option == null) ? 0 : this.option.hashCode());
        result = prime * result + ((this.sourceHint == null) ? 0 : this.sourceHint.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        CommandImpl other = (CommandImpl)obj;
        if (this.isResolved != other.isResolved)
            return false;
        if (this.option == null) {
            if (other.option != null)
                return false;
        } else if (!this.option.equals(other.option))
            return false;
        if (this.sourceHint == null) {
            if (other.sourceHint != null)
                return false;
        } else if (!this.sourceHint.equals(other.sourceHint))
            return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public abstract CommandImpl clone();
}
/* JavaCC - OriginalChecksum=328e6e6dec01c1dc65d33fce3077b4f3 (do not edit this line) */
