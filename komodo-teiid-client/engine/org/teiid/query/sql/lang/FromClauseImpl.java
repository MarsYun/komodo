/* Generated By:JJTree: Do not edit this line. FromClause.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.teiid.query.sql.lang;

import java.util.Collection;

import org.komodo.spi.annotation.Since;
import org.komodo.spi.query.sql.lang.FromClause;
import org.komodo.spi.runtime.version.DefaultTeiidVersion.Version;
import org.teiid.query.parser.TCLanguageVisitorImpl;
import org.teiid.query.parser.TeiidClientParser;
import org.teiid.query.sql.lang.OptionImpl.MakeDep;
import org.teiid.query.sql.symbol.GroupSymbolImpl;

/**
 * A FromClause is an interface for subparts held in a FROM clause.  One 
 * type of FromClause is {@link UnaryFromClauseImpl}, which is the more common 
 * use and represents a single group.  Another, less common type of FromClause
 * is the {@link JoinPredicateImpl} which represents a join between two FromClauses
 * and may contain criteria.
 */
public abstract class FromClauseImpl extends SimpleNode implements FromClause<TCLanguageVisitorImpl> {

    /**
     * 
     */
    public static final String MAKEIND = "MAKEIND"; //$NON-NLS-1$

    /**
     * 
     */
    @Since(Version.TEIID_8_0)
    public static final String PRESERVE = "PRESERVE"; //$NON-NLS-1$

    private boolean optional;

    private MakeDep makeDep;

    private boolean makeNotDep;

    private boolean makeInd;

    private boolean noUnnest;

    private boolean preserve;

    /**
     * @param p
     * @param id
     */
    public FromClauseImpl(TeiidClientParser p, int id) {
        super(p, id);
    }

    /**
     * @return whether has any hints set
     */
    public boolean hasHint() {
        return optional || (makeDep != null && makeDep.isSimple()) || makeNotDep || makeInd || noUnnest || preserve;
    }

    @Override
    public boolean isOptional() {
        return optional;
    }
    
    @Override
    public void setOptional(boolean optional) {
        this.optional = optional;
    }
    
    /**
     * @return make ind flag
     */
    public boolean isMakeInd() {
        return makeInd;
    }
    
    /**
     * @param makeInd
     */
    public void setMakeInd(boolean makeInd) {
        this.makeInd = makeInd;
    }

    /**
     * @param noUnnest
     */
    public void setNoUnnest(boolean noUnnest) {
        this.noUnnest = noUnnest;
    }
    
    /**
     * @return no unnest flag
     */
    public boolean isNoUnnest() {
        return noUnnest;
    }

    @Override
    public boolean isMakeDep() {
        return this.makeDep != null;
    }

    public MakeDep getMakeDep() {
        return makeDep;
    }

    public void setMakeDep(MakeDep makedep) {
        this.makeDep = makedep;
    }

    @Override
    public void setMakeDep(boolean makeDep) {
        if (makeDep) {
            if (this.makeDep == null) {
                setMakeDep(new MakeDep(getTeiidVersion()));
            }
        } else {
            this.makeDep = null;
        }
    }

    @Override
    public boolean isMakeNotDep() {
        return this.makeNotDep;
    }

    @Override
    public void setMakeNotDep(boolean makeNotDep) {
        this.makeNotDep = makeNotDep;
    }
    
    /**
     * @return preserve flag
     */
    public boolean isPreserve() {
        return preserve;
    }
    
    /**
     * @param preserve
     */
    public void setPreserve(boolean preserve) {
        this.preserve = preserve;
    }

    /**
     * @param groups
     */
    public abstract void collectGroups(Collection<GroupSymbolImpl> groups);

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.makeDep == null ? 0 : this.makeDep.hashCode());
        result = prime * result + (this.makeInd ? 1231 : 1237);
        result = prime * result + (this.makeNotDep ? 1231 : 1237);
        result = prime * result + (this.noUnnest ? 1231 : 1237);
        result = prime * result + (this.optional ? 1231 : 1237);
        result = prime * result + (this.preserve ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        FromClauseImpl other = (FromClauseImpl)obj;
        
        if (this.makeDep == null) {
            if (other.makeDep != null)
                return false;
        } else if (!this.makeDep.equals(other.makeDep))
            return false;

        if (this.makeInd != other.makeInd) return false;
        if (this.makeNotDep != other.makeNotDep) return false;
        if (this.noUnnest != other.noUnnest) return false;
        if (this.optional != other.optional) return false;
        if (this.preserve != other.preserve) return false;
        return true;
    }

    /** Accept the visitor. **/
    @Override
    public void acceptVisitor(TCLanguageVisitorImpl visitor) {
        visitor.visit(this);
    }

    @Override
    public abstract FromClauseImpl clone();

}
/* JavaCC - OriginalChecksum=908130697ce6a37a6c778dfefda987bb (do not edit this line) */
