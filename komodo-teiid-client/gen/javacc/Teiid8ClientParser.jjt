/*
* JBoss, Home of Professional Open Source.
* See the COPYRIGHT.txt file distributed with this work for information
* regarding copyright ownership. Some portions may be licensed
* to Red Hat, Inc. under one or more contributor license agreements.
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
* 02110-1301 USA.
*/

options {
	STATIC = false;
	ERROR_REPORTING = true;
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = false;
	IGNORE_CASE = true;
    MULTI = true;
    BUILD_NODE_FILES = false;
    NODE_PREFIX = "";
    NODE_SCOPE_HOOK = false;
    NODE_USES_PARSER = true;
    NODE_PACKAGE = "org.teiid.query.sql.lang";
    VISITOR = false;
    GRAMMAR_ENCODING="UTF-8";
    KEEP_LINE_COLUMN = true;
    NODE_FACTORY = "TeiidNodeFactory";
    NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(Teiid8ClientParser)

/*
* JBoss, Home of Professional Open Source.
* See the COPYRIGHT.txt file distributed with this work for information
* regarding copyright ownership. Some portions may be licensed
* to Red Hat, Inc. under one or more contributor license agreements.
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
* 02110-1301 USA.
*/
package org.teiid.query.parser.v8;

import java.math.BigInteger;
import java.util.*;
import java.util.regex.Matcher;
import org.komodo.spi.runtime.version.TeiidVersion;
import org.komodo.spi.runtime.version.DefaultTeiidVersion;
import org.komodo.spi.runtime.version.DefaultTeiidVersion.Version;
import org.komodo.spi.query.sql.lang.MatchCriteria.MatchMode;
import org.komodo.spi.query.sql.lang.JoinType;
import org.teiid.runtime.client.Messages;
import org.teiid.language.SortSpecification.NullOrdering;
import org.teiid.metadata.AbstractMetadataRecord;
import org.teiid.metadata.BaseColumn;
import org.teiid.metadata.BaseColumn.NullType;
import org.teiid.metadata.Column;
import org.teiid.metadata.KeyRecord;
import org.teiid.metadata.MetadataFactory;
import org.teiid.metadata.Procedure;
import org.teiid.metadata.ProcedureParameter;
import org.teiid.metadata.Table;
import org.teiid.query.parser.AbstractTeiidClientParser;
import org.teiid.query.parser.ParsedDataType;
import org.teiid.query.parser.ParseInfo;
import org.teiid.query.parser.TeiidNodeFactory;
import org.teiid.query.parser.TeiidNodeFactory.ASTNodes;
import org.teiid.query.sql.lang.*;
import org.teiid.query.sql.lang.CriteriaOperator.Operator;
import org.teiid.query.sql.lang.SubqueryCompareCriteriaImpl.PredicateQuantifier;
import org.teiid.query.sql.proc.*;
import org.teiid.query.sql.symbol.*;
import org.teiid.core.types.BinaryTypeImpl;
import org.teiid.core.types.DefaultDataTypeManager;
import org.teiid.core.util.StringUtil;

/** 
 * <p>The SQLParser is a JavaCC-generated parser that reads a SQL string and produces a 
 * Query object.  The SQLParser.java file is generated by JavaCC from the SQLParser.jj
 * file.  <B>WARNING:</B> DO NOT MODIFY the SQLParser.java file as it will be 
 * regenerated from the .jj file and your changes will be lost!</p>
 */
@SuppressWarnings({"nls", "unused", "javadoc"})
public class Teiid8ClientParser extends AbstractTeiidClientParser {

    private String getComment(Token t) {
        Token optToken = t.specialToken;
        if (optToken == null) { 
            return ""; //$NON-NLS-1$
        }

        //handle nested comments
        String image = optToken.image;
        while (optToken.specialToken != null) {
            optToken = optToken.specialToken;
            image = optToken.image + image;
        }

        String hint = image.substring(2, image.length() - 2);
        if (hint.startsWith("+")) { //$NON-NLS-1$
            hint = hint.substring(1);
        }

        return hint;
    }

    private boolean isNonStrictHint(Token t) {
        String[] parts = getComment(t).split("\\s"); //$NON-NLS-1$
        for (int i = 0; i < parts.length; i++) {
            if (parts[i].equalsIgnoreCase(LimitImpl.NON_STRICT)) {
                return true;
            }
        }
        return false;
    }

    private SourceHintImpl getSourceHint(Token t) {
        String comment = getComment(t);
        Matcher matcher = SOURCE_HINT.matcher(comment);
        if (!matcher.find()) {
            return null;
        }

        SourceHintImpl sourceHint = new SourceHintImpl();
        if (matcher.group(1) != null) {
            sourceHint.setUseAliases(true);
        }

        String generalHint = matcher.group(2);
        if (generalHint != null) {
            sourceHint.setGeneralHint(normalizeStringLiteral(generalHint));
        }

        int end = matcher.end();
        matcher = SOURCE_HINT_ARG.matcher(comment);
        while (matcher.find(end)) {
            end = matcher.end();
            sourceHint.setSourceHint(matcher.group(1), normalizeStringLiteral(matcher.group(3)), matcher.group(2) != null);
        }

        return sourceHint;
    }

    private SourceHintImpl getSourceHint(Teiid8ClientParser parser) {
       int index = 1;
       //scan for the first keyword
       Token t = null;
       do {
           t = parser.getToken(index++);
       } while (t != null && t.kind == LPAREN);
       t = parser.getToken(index);
       if (t == null) {
           return null;
       }

       return getSourceHint(t);
    }

    private SubqueryHint getSubqueryHint(Token t) {
        SubqueryHint hint = new SubqueryHint();
        String[] parts = getComment(t).split("\\s"); //$NON-NLS-1$
        for (int i = 0; i < parts.length; i++) {
            if (parts[i].equalsIgnoreCase(SubqueryHint.MJ)) {
                hint.setMergeJoin(true);
            } else if (parts[i].equalsIgnoreCase(SubqueryHint.NOUNNEST)) {
                hint.setNoUnnest(true);
            } else if (parts[i].equalsIgnoreCase(SubqueryHint.DJ)) {
                hint.setDepJoin();
            }
        }
        return hint;
    }

    private void setFromClauseOptions(Token groupID, FromClauseImpl fromClause){
        String[] parts = getComment(groupID).split("\\s"); //$NON-NLS-1$

        for (int i = 0; i < parts.length; i++) {
            if (parts[i].equalsIgnoreCase(OptionImpl.OPTIONAL)) {
                fromClause.setOptional(true);
            } else if (parts[i].equalsIgnoreCase(OptionImpl.MAKEDEP)) {
                fromClause.setMakeDep(true);
            } else if (parts[i].equalsIgnoreCase(OptionImpl.MAKENOTDEP)) {
                fromClause.setMakeNotDep(true);
            } else if (parts[i].equalsIgnoreCase(FromClauseImpl.MAKEIND)) {
                fromClause.setMakeInd(true);
            } else if (parts[i].equalsIgnoreCase(SubqueryHint.NOUNNEST)) {
                fromClause.setNoUnnest(true);
            } else if (parts[i].equalsIgnoreCase(FromClauseImpl.PRESERVE)) {
                fromClause.setPreserve(true);
            }
        }
    }

    @Override
    public TeiidVersion getVersion() {
        if (version == null)
            version = new DefaultTeiidVersion("8.x.x");

        return version;
    }

    private void requires(boolean condition) throws ParseException {
        if (!condition)
            throw new ParseException(Messages.getString(
                Messages.TeiidParser.teiid_version_failure, getVersion().toString()));
    }

    private void requiresVersionAtLeast(Version version) throws ParseException {
        if (! versionAtLeast(version))
            throw new ParseException(Messages.getString(
                Messages.TeiidParser.teiid_version_atleast_failure, version.get().toString(), getVersion().toString()));
    }

} // end class

PARSER_END(Teiid8ClientParser)

TOKEN_MGR_DECLS : 
{
    int commentNestingDepth; 
} 

SKIP :
{
	" " | "\t" | "\n" | "\r"
}

MORE :
{
  "/*" { commentNestingDepth = 1 ; } : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
MORE : 
{  
  "/*" { commentNestingDepth += 1 ; } 
} 

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : 
{  
  "*/" { 
    commentNestingDepth -= 1;
    SwitchTo( commentNestingDepth==0 ? DEFAULT : IN_MULTI_LINE_COMMENT ) ; 
  }
} 

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN: /* Data types */
{
	<STRING: "string">
|   <VARBINARY: "varbinary">
|   <VARCHAR: "varchar">
|	<BOOLEAN: "boolean">
|	<BYTE: "byte">
|   <TINYINT: "tinyint">
|	<SHORT: "short">
|   <SMALLINT: "smallint">
|	<CHAR: "char">
|	<INTEGER: "integer">
|	<LONG: "long">
|   <BIGINT: "bigint">
|	<BIGINTEGER: "biginteger">
|	<FLOAT: "float">
|   <REAL: "real"> 
|	<DOUBLE: "double">
|	<BIGDECIMAL: "bigdecimal">
|   <DECIMAL: "decimal">
|	<DATE: "date">
|	<TIME: "time">
|	<TIMESTAMP: "timestamp">
|	<OBJECT: "object">
|	<BLOB: "blob">
|	<CLOB: "clob">
|	<XML: "xml">
}


TOKEN: /* Functions with special syntax */
{
	<CAST: "cast">
|	<CONVERT: "convert">
}

TOKEN : /* Reserved words */
{
    <ADD: "add">
|   <ALL: "all">
|   <ALTER: "alter">
|   <AND: "and">
|   <ANY: "any">
|   <ARRAY: "array">
|   <ARRAY_AGG: "array_agg">
|   <AS: "as">
|   <ASC: "asc">
|   <ATOMIC: "atomic">
|   <AUTORIZATION: "authorization">
|   <BEGIN: "begin">
|   <BETWEEN: "between">
|   <BINARY: "binary">
|   <BOTH: "both">
|   <BREAK: "break">
|   <BY: "by">
|   <CALL: "call">
|   <CALLED: "called">
|   <CASCADED: "cascaded">
|   <CASE: "case">
|   <CHARACTER: "character">
|   <CHECK: "check">
|   <CLOSE: "close">
|   <COLLATE: "collate">
|   <COLUMN: "column">
|   <COMMIT: "commit">
|   <CONNECT: "connect">
|   <CONSTRAINT: "constraint">
|   <CONTINUE: "continue">
|   <CORRESPONDING: "corresponding">
|   <CURRENT_DATE: "current_date">
|   <CURRENT_TIME: "current_time">
|   <CURRENT_TIMESTAMP: "current_timestamp">
|   <CURRENT_USER: "current_user">
|   <CREATE: "create">
|   <CRITERIA: "criteria">
|   <CROSS: "cross">
|   <CURSOR: "cursor">
|   <DAY: "day">
|   <DEALLOCATE: "deallocate">
|   <DEFAULT_KEYWORD: "default">
|   <DECLARE: "declare">
|   <DELETE: "delete">
|   <DESC: "desc">
|   <DESCRIBE: "describe">
|   <DETERMINISTIC: "deterministic">
|   <DISCONNECT: "disconnect">
|   <DISTINCT: "distinct">
|   <DROP: "drop">
|	<EACH: "each">
|   <ELSE: "else">
|   <END: "end">
|   <ERROR: "error">
|   <ESCAPE: "escape">
|   <EXCEPT: "except">
|   <EXEC: "exec">
|   <EXECUTE: "execute">
|   <EXTERNAL: "external">
|   <EXISTS: "exists">
|   <FALSE: "false">
|   <FETCH: "fetch">
|   <FILTER: "filter">
|   <FOR: "for">
|   <FOREIGN: "foreign">
|   <FROM: "from">
|   <FULL: "full">
|   <FUNCTION: "function">
|   <GET: "get">
|   <GLOBAL: "global">
|   <GRANT: "grant">
|   <GROUP: "group">
|   <HAS: "has">
|   <HAVING: "having">
|   <HOLD: "hold">
|   <HOUR: "hour">
|   <IF: "if">
|   <IDENTITY: "identity">
|   <IMMEDIATE: "immediate">
|   <IN: "in">
|   <INDICATOR: "indicator">
|   <INNER: "inner">
|   <INPUT: "input">
|   <INOUT: "inout">
|   <INSENSITIVE: "insensitive">
|   <INSERT: "insert">
|   <INTERSECT: "intersect">
|   <INTERVAL: "interval">
|   <INTO: "into">
|   <IS: "is">
|   <ISOLATION: "isolation">
|   <JOIN: "join">
|   <LEFT: "left">
|   <LANGUAGE: "language">
|   <LARGE: "large">
|   <LEADING: "leading">
|   <LEAVE: "leave">
|   <LIKE: "like">
|   <LIKE_REGEX: "like_regex">
|   <LIMIT: "limit">
|   <LOCAL: "local">
|   <LOOP: "loop">
|   <MAKEDEP: "makedep">
|   <MAKENOTDEP: "makenotdep">
|   <MATCH: "match">
|   <MERGE: "merge">
|   <METHOD: "method">
|   <MINUTE: "minute">
|   <MODIFIES: "modifies">
|   <MODULE: "module">
|   <MONTH: "month">
|   <NATURAL: "natural">
|   <NEW: "new">
|	<NOCACHE: "nocache">
|   <NO: "no">
|   <NONE: "none">
|   <NOT: "not">
|   <NULL: "null">
|   <OF: "of">
|   <OFFSET: "offset">
|   <OLD: "old">
|   <ON: "on">
|   <ONLY: "only">
|   <OPEN: "open">
|   <OPTION: "option">
|   <OPTIONS: "options">
|   <OR: "or">
|   <ORDER: "order">
|   <OUT: "out">
|   <OUTER: "outer">
|   <OUTPUT: "output">
|   <OVER: "over">
|   <OVERLAPS: "OVERLAPS">
|   <PARAMETER: "parameter">
|   <PARTITION: "partition">
|   <PRECISION: "precision">
|   <PREPARE: "prepare">
|   <PRIMARY: "primary">
|   <PROCEDURE: "procedure">
|   <RANGE: "range">
|   <READS: "reads">
|   <RECURSIVE: "recursive">
|   <REFERENCES: "REFERENCES">
|   <REFERENCING: "REFERENCING">
|   <RETURN: "return">
|   <RETURNS: "returns">
|   <REVOKE: "REVOKE">
|   <RIGHT: "right">
|   <ROLLBACK: "ROLLBACK">
|   <ROLLUP: "ROLLUP">
|   <ROW: "row">
|   <ROWS: "rows">
|   <SAVEPOINT: "savepoint">
|   <SCROLL: "scroll">
|   <SEARCH: "search">
|   <SECOND: "second">
|   <SELECT: "select">
|   <SENSITIVE: "sensitive">
|   <SESSION_USER: "session_user">
|   <SET: "set">
|   <SIMILAR: "similar">
|   <SPECIFIC: "specific">
|   <SOME: "some">
|   <SQL: "sql">
|   <SQLEXCEPTION: "sqlexception">
|   <SQLSTATE: "sqlstate">
|   <SQLWARNING: "sqlwarning">
|   <START: "start">
|   <STATIC: "static">
|   <SYSTEM: "system">
|   <SYSTEM_USER: "system_user">
|   <TABLE: "table">
|   <TEMPORARY: "temporary">
|   <THEN: "then">
|   <TIMEZONE_HOUR: "timezone_hour">
|   <TIMEZONE_MINUTE: "timezone_minute">
|   <TO: "to">
|   <TRAILING: "trailing">
|   <TRANSLATE: "translate">
|   <TRIGGER: "trigger">
|   <TRUE: "true">
|   <UNION: "union">
|   <UNIQUE: "unique">
|   <UNKNOWN: "unknown">
|   <USER: "user">
|   <UPDATE: "update">
|   <USING: "using">
|   <VALUE: "value">
|   <VALUES: "values">
|   <VIRTUAL: "virtual">
|   <WHEN: "when">
|   <WHENEVER: "whenever">
|   <WHERE: "where">
|   <WITH: "with">
|   <WHILE: "while">
|   <WINDOW: "window">
|   <WITHIN: "within">
|   <WITHOUT: "without">
|   <YEAR: "year">

|   <ALLOCATE: "allocate">
|   <ARE: "are">
|   <ASENSITIVE: "asensitive">
|   <ASYMETRIC: "asymetric">
|   <CYCLE: "cycle">
|   <DEC: "dec">
|   <DEREF: "deref">
|   <DYNAMIC: "dynamic">
|   <ELEMENT: "element">
|   <FREE: "free">
|   <INT: "int">
|   <LATERAL: "lateral">
|   <LOCALTIME: "localtime">
|   <LOCALTIMESTAMP: "localtimestamp">
|   <MEMBER: "member">
|   <MULTISET: "multiset">
|   <NATIONAL: "national">
|   <NCHAR: "nchar">
|   <NCLOB: "nclob">
|   <NUMERIC: "numeric">
|   <RELEASE: "release">
|   <SPECIFICTYPE: "specifictype">
|   <SYMETRIC: "symetric">
|   <SUBMULTILIST: "submultilist">
|   <TRANSLATION: "translation">
|   <TREAT: "treat">
|   <VARYING: "varying">
}

TOKEN : /* SQL/XML Reserved words */
{
    <XMLAGG: "xmlagg">
|   <XMLATTRIBUTES: "xmlattributes">
|   <XMLBINARY: "xmlbinary">
|   <XMLCAST: "xmlcast">
|   <XMLCONCAT: "xmlconcat">
|   <XMLCOMMENT: "xmlcomment">
|   <XMLDOCUMENT: "xmldocument">
|   <XMLELEMENT: "xmlelement">
|   <XMLEXISTS: "xmlexists">
|   <XMLFOREST: "xmlforest">
|   <XMLITERATE: "xmliterate">
|   <XMLNAMESPACES: "xmlnamespaces">
|   <XMLPARSE: "xmlparse">
|   <XMLPI: "xmlpi">
|   <XMLQUERY: "xmlquery">
|   <XMLSERIALIZE: "xmlserialize">
|   <XMLTABLE: "xmltable">
|   <XMLTEXT: "xmltext">
|   <XMLVALIDATE: "xmlvalidate">
}

TOKEN : /* SQL/MED Reserved words */
{
    <DATALINK: "datalink">
|   <DLNEWCOPY: "dlnewcopy">
|   <DLPREVIOUSCOPY: "dlpreviouscopy">
|   <DLURLCOMPLETE: "dlurlcomplete">
|   <DLURLCOMPLETEWRITE: "dlurlcompletewrite">
|   <DLURLCOMPLETEONLY: "dlurlcompleteonly">
|   <DLURLPATH: "dlurlpath">
|   <DLURLPATHWRITE: "dlurlpathwrite">
|   <DLURLPATHONLY: "dlurlpathonly">
|   <DLURLSCHEME: "dlurlscheme">
|   <DLURLSERVER: "dlurlserver">
|   <DLVALUE: "dlvalue">
|   <IMPORT: "import">
}

TOKEN : /* NonReserved words */
{
    <INSTEAD: "instead">
|   <ENABLED: "enabled">
|   <DISABLED: "disabled">
|   <VIEW: "view">
|   <KEY: "key">
|   <SERIAL: "serial">
|   <TEXTAGG: "textagg">
|   <COUNT: "count">
|   <ROW_NUMBER: "row_number">
|   <RANK: "rank">
|   <DENSE_RANK: "dense_rank">
|   <SUM: "sum">
|   <AVG: "avg">
|   <MIN: "min">
|   <MAX: "max">
|   <EVERY: "every">
|   <STDDEV_POP: "stddev_pop">
|   <STDDEV_SAMP: "stddev_samp">
|   <VAR_SAMP: "var_samp">
|   <VAR_POP: "var_pop">
|   <DOCUMENT: "document">
|   <CONTENT: "content">
|   <TRIM: "trim">
|   <EMPTY: "empty">
|   <ORDINALITY: "ordinality">
|   <PATH: "path">
|   <FIRST: "first">
|   <LAST: "last">
|   <NEXT: "next">
|   <SUBSTRING: "substring">
|   <EXTRACT: "extract">
|   <TO_CHARS: "to_chars">
|   <TO_BYTES: "to_bytes">
|   <TIMESTAMPADD: "timestampadd">
|   <TIMESTAMPDIFF: "timestampdiff">
|   <QUERYSTRING: "querystring">
|   <NAMESPACE: "namespace">
|   <RESULT: "result">
|   <INDEX: "index">
|   <ACCESSPATTERN: "accesspattern">
|   <AUTO_INCREMENT: "auto_increment">
|   <WELLFORMED: "wellformed">
|   <SQL_TSI_FRAC_SECOND: "sql_tsi_frac_second">
|   <SQL_TSI_SECOND: "sql_tsi_second">
|   <SQL_TSI_MINUTE: "sql_tsi_minute">
|   <SQL_TSI_HOUR: "sql_tsi_hour">
|   <SQL_TSI_DAY: "sql_tsi_day">
|   <SQL_TSI_WEEK: "sql_tsi_week">
|   <SQL_TSI_MONTH: "sql_tsi_month">
|   <SQL_TSI_QUARTER: "sql_tsi_quarter">
|   <SQL_TSI_YEAR: "sql_tsi_year">
|   <TEXTTABLE: "texttable">
|   <ARRAYTABLE: "arraytable">
|   <SELECTOR: "selector">
|   <SKIP_KEYWORD: "skip">
|   <WIDTH: "width">
|   <PASSING: "passing">
|   <NAME: "name">
|   <ENCODING: "encoding">
|   <COLUMNS: "columns">
|   <DELIMITER: "delimiter">
|   <QUOTE: "quote">
|   <HEADER: "header">
|   <NULLS: "nulls">
|   <OBJECTTABLE: "objecttable">
|   <VERSION: "version">
|   <INCLUDING: "including">
|   <EXCLUDING: "excluding">
|   <XMLDECLARATION: "xmldeclaration">
|   <VARIADIC: "variadic">
|   <EXCEPTION: "exception">
|   <RAISE: "raise">
|   <CHAIN: "chain">
|   <JSONARRAY_AGG: "jsonarray_agg">
|   <JSONOBJECT: "jsonobject">

}
/*
name=all in group identifier
*/
TOKEN : { < ALL_IN_GROUP: <ID> <PERIOD> <STAR> > }
/*
name=identifier
*/
TOKEN : { < ID: <QUOTED_ID> (<PERIOD> <QUOTED_ID>)* > }
TOKEN : { < #QUOTED_ID: <ID_PART> | ("\"" (("\"\"") | ~["\""] )+ "\"") >  }     
TOKEN : { < #ID_PART: (("@" | "#" | <LETTER>) (<LETTER> | "_" | <DIGIT>)*) > }
/*
name=escaped function
*/
TOKEN : { < ESCAPEDFUNCTION: "{" "fn" > }
/*
name=escaped join
*/
TOKEN : { < ESCAPEDJOIN: "{" "oj" > }
/*
name=escaped type
*/
TOKEN : { < ESCAPEDTYPE: "{" ("d" | "t" | "ts" | "b") > }
/*
name=decimal numeric literal
*/
TOKEN : { < DECIMALVAL: (<DIGIT>)* <PERIOD> <UNSIGNEDINTEGER> > }
/*
name=approximate numeric literal
*/
TOKEN : { < FLOATVAL: <DIGIT> <PERIOD> <UNSIGNEDINTEGER> 
				["e", "E"] (<PLUS>|<MINUS>)? <UNSIGNEDINTEGER> > }
/*
name=string literal
*/				
TOKEN : { < STRINGVAL: (("N"|"E")? "'" ( ("''") | ~["'"] )* "'") > }
TOKEN : { < #LETTER: (["a"-"z","A"-"Z"] | ["\u0153"-"\ufffd"]) > }
TOKEN : { < #DIGIT: ["0"-"9"] > }
/*
name=unsigned integer literal
*/
TOKEN : { < UNSIGNEDINTEGER: (<DIGIT>)+ > }
/*
name=binary string literal
*/
TOKEN : { < BINARYSTRINGVAL: ("X"|"x" "'" ( <HEXIT><HEXIT> )+ "'") > }
TOKEN : { < #HEXIT: (["a"-"f","A"-"F"] | <DIGIT> ) > }

TOKEN :
{
	<COMMA: ",">
|	<PERIOD: ".">
|	<LPAREN: "(">
|	<RPAREN: ")">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <LSBRACE: "[">
|   <RSBRACE: "]">
|	<EQ: "=">
|	<NE: "<>">
|	<NE2: "!=">
|	<LT: "<">
|	<LE: "<=">
|	<GT: ">">
|	<GE: ">=">
|	<STAR: "*">
|	<SLASH: "/">
|	<PLUS: "+">
|	<MINUS: "-">
|   <QMARK: "?">
|   <DOLLAR: "$">
|   <SEMICOLON: ";">
|   <COLON: ":">
|	<CONCAT_OP: "||">
}

/*
name=string
description=A string literal value.  Use '' to escape ' in the string.  
example={code:sql}'a string'{code}\n{code:sql}'it''s a string'{code}
*/
String stringVal() :
{
	Token t = null;	
}
{
  	t = <STRINGVAL>
  	{
  		return normalizeStringLiteral(t.image);
  	}
}

/*
name=non-reserved identifier
description=Allows non-reserved keywords to be parsed as identifiers  
example=SELECT *COUNT* FROM ...
*/
Token nonReserved() :
{
}
{
    (<INSTEAD>|<VIEW>|<ENABLED>|<DISABLED>|<KEY>|<SERIAL>|<TEXTAGG>|<COUNT>|<ROW_NUMBER>|<RANK>|<DENSE_RANK>|<SUM>|<AVG>|<MIN>|<MAX>|<EVERY>|<STDDEV_POP>
     |<STDDEV_SAMP>|<VAR_SAMP>|<VAR_POP>|<DOCUMENT>|<CONTENT>|<TRIM>|<EMPTY>|<ORDINALITY>|<PATH>|<FIRST>|<LAST>|<NEXT>|<SUBSTRING>|<EXTRACT>|<TO_CHARS>
     |<TO_BYTES>|<TIMESTAMPADD>|<TIMESTAMPDIFF>|<QUERYSTRING>|<NAMESPACE>|<RESULT>|<INDEX>|<ACCESSPATTERN>|<AUTO_INCREMENT>|<WELLFORMED>|<SQL_TSI_FRAC_SECOND>
     |<SQL_TSI_SECOND>|<SQL_TSI_MINUTE>|<SQL_TSI_HOUR>|<SQL_TSI_DAY>|<SQL_TSI_WEEK>|<SQL_TSI_MONTH>|<SQL_TSI_QUARTER>|<SQL_TSI_YEAR>|<TEXTTABLE>|<ARRAYTABLE>
     |<SELECTOR>|<SKIP_KEYWORD>|<WIDTH>|<PASSING>|<NAME>|<ENCODING>|<COLUMNS>|<DELIMITER>|<QUOTE>|<HEADER>|<NULLS>|<OBJECTTABLE>
     |<VERSION>|<INCLUDING>|<EXCLUDING>|<XMLDECLARATION>|<VARIADIC>|<RAISE>|<EXCEPTION>|<CHAIN>|<JSONARRAY_AGG>|<JSONOBJECT>)
    {
    	return getToken(0);
    }	
}

/*
name=identifier
description=Partial or full name of a single entity.
example={code:sql}tbl.col{code}\n{code:sql}"tbl"."col"{code}
*/
String id(Boolean validate) :
{
}
{
  	(<ID>|nonReserved())
  	{
  		String id = normalizeId(getToken(0).image);
  		if (validate != null) {
  		    try {
  			   return validateName(id, validate);
  			 } catch (Exception ex) {
  			   throw new ParseException(ex.getLocalizedMessage());
  		     }
  		}
  		return id;
  	}
}

/* TODO: createProcedure should not be here, but is due to all of the legacy tests
unused=true
*/
CommandImpl command(ParseInfo info) :
{
    CommandImpl command = null;
}
{
    (LOOKAHEAD(2) command = createProcedure(info) |
     command = userCommand(info) |
     command = callableStatement(info)
	)
	[<SEMICOLON>]
	<EOF>
	{
		return command;
	}
}

/*
unused=true
*/
CommandImpl designerCommand(ParseInfo info) :
{
	CommandImpl command = null;
}
{
	(LOOKAHEAD (2) command = createProcedure(info) |
	 command = forEachRowTriggerAction(info) |
	 command = userCommand(info)	  
	)
	[<SEMICOLON>]
	<EOF>
	{
		return command;
	}
}

/*
name=create trigger
description=Creates a trigger action on the given target.
example={code:sql}CREATE TRIGGER ON vw INSTEAD OF INSERT AS FOR EACH ROW BEGIN ATOMIC ... END{code}
*/
CommandImpl createTrigger(ParseInfo info) :
{
  	String target = null;
  	TriggerActionImpl triggerAction = null;
  	Token event = null;
}
{
	<CREATE> <TRIGGER> <ON> target = id(null) <INSTEAD> <OF> 
	(event = <INSERT> | event = <UPDATE> | event = <DELETE>) 
	<AS> triggerAction = forEachRowTriggerAction(info)
	{
		AlterTriggerImpl alterTrigger = alterTrigger();
		alterTrigger.setTarget(groupSymbol(target));
		alterTrigger.setDefinition(triggerAction);
		alterTrigger.setEvent(Table.TriggerEvent.valueOf(event.image.toUpperCase()));
		alterTrigger.setCreate(true);
		return alterTrigger;
	}
}

/*
name=alter
description=Alter the given target.
example={code:sql}ALTER VIEW vw AS SELECT col FROM tbl{code}
*/
CommandImpl alter(ParseInfo info) :
{
  	String target = null;
  	QueryCommandImpl command = null;
  	StatementImpl stmt = null;
  	TriggerActionImpl triggerAction = null;
  	Token comment = null;
  	Token event = null;
  	Boolean enabled = null;
}
{
	<ALTER>
	(
	 	(<VIEW> target = id(null) <AS> { comment = getToken(1).specialToken; } command = queryExpression(info)) 
	 	{
	 	    /*
	 	     * if (comment != null) {
		 	 *     command.setCacheHint(getQueryCacheOptionImpl(comment.image));
	 	     * }
	 	     */
            AlterViewImpl alterView = alterView();
	 		alterView.setTarget(groupSymbol(target));
	 		alterView.setDefinition(command);
	 		return alterView;
	 	}
		| (<PROCEDURE> target = id(null) <AS> { comment = getToken(1).specialToken; } stmt = statement(info)) 
		{
			CreateProcedureCommandImpl cup = createASTNode(ASTNodes.CREATE_PROCEDURE_COMMAND);
			cup.setBlock(asBlock(stmt));
			/*
			 * if (comment != null) {
		 	 *     cup.setCacheHint(getQueryCacheOptionImpl(comment.image));
	 	     * }
	 	     */
            AlterProcedureImpl alterProc = alterProcedure();
			alterProc.setTarget(groupSymbol(target));
			alterProc.setDefinition(cup);
			return alterProc;
		}
		| (<TRIGGER> <ON> target = id(null) <INSTEAD> <OF> 
		  (event = <INSERT> | event = <UPDATE> | event = <DELETE>) 
		  ((<AS> triggerAction = forEachRowTriggerAction(info))
		  |<ENABLED> {enabled=true;}| <DISABLED> {enabled=false;}))
		{
		    AlterTriggerImpl alterTrigger = alterTrigger();
			alterTrigger.setTarget(groupSymbol(target));
			alterTrigger.setDefinition(triggerAction);
			alterTrigger.setEvent(Table.TriggerEvent.valueOf(event.image.toUpperCase()));
			if (enabled != null) {
				alterTrigger.setEnabled(enabled);
			}
			return alterTrigger;
		}
	)
}

/*
name=for each row trigger action
description=Defines an action to perform on each row.
example={code:sql}FOR EACH ROW BEGIN ATOMIC ... END{code}
*/
TriggerActionImpl forEachRowTriggerAction(ParseInfo info) #TriggerActionImpl :
{
	BlockImpl b = block();
	b.setAtomic(true);
	StatementImpl stmt = null;
}
{
	<FOR> <EACH> <ROW>
	(
	 LOOKAHEAD(1) (<BEGIN> [<ATOMIC>]
      (
	    stmt = statement(info)
	    {          
    	    b.addStatement(stmt);            	                	    
	    }
      )*
      <END> 
     )
     |
     stmt = statement(info)
     {
       b = asBlock(stmt);
       b.setAtomic(true);
     }
    ) 
	{
		jjtThis.setBlock(b);
		return jjtThis;
	}
}

/*
name=directly executable statement
description=A statement that can be executed at runtime.
example={code:sql}SELECT * FROM tbl{code}
index=true
*/
CommandImpl userCommand(ParseInfo info) :
{
	CommandImpl command = null;
	SourceHintImpl sourceHint = null;
	BlockImpl block = null;
}
{
    {
      if (versionLessThan(Version.TEIID_8_4)) {
        int index = 1;
        Token t = null;
        do
          t = getToken(index++);
        while (t != null && t.kind == LPAREN);
        t = getToken(index);
        if (t != null)
          sourceHint = getSourceHint(t);
      }
    }
	(command = queryExpression(info) |
	command = storedProcedure(info, 1) |
    { if (versionAtLeast(Version.TEIID_8_4)) sourceHint = getSourceHint(this); } command = insert(info) |
    { if (versionAtLeast(Version.TEIID_8_4)) sourceHint = getSourceHint(this); } command = update(info) |
    { if (versionAtLeast(Version.TEIID_8_4)) sourceHint = getSourceHint(this); } command = delete(info) |
    command = dropTable(info) |
	LOOKAHEAD(2) command = createTempTable(info) |
    LOOKAHEAD(2) command = createForeignTempTable(info) |
	command = alter(info) |
	command = createTrigger(info) |
	{
      requiresVersionAtLeast(Version.TEIID_8_4);
    }
    block = compoundStatement(info)
    {
      CreateProcedureCommandImpl procCommand = createASTNode(ASTNodes.CREATE_PROCEDURE_COMMAND);
      procCommand.setBlock(block);
      command = procCommand;
    }
	)
	{
	    setSourceHint(sourceHint, command);
		return command;
	}
}

/*
name=drop table
description=Creates a trigger action on the given target.
example={code:sql}CREATE TRIGGER ON vw INSTEAD OF INSERT AS FOR EACH ROW BEGIN ATOMIC ... END{code}
*/
DropImpl dropTable(ParseInfo info) #DropImpl :
{
	String table = null;
}
{
	<DROP> <TABLE> 
	table = id(null)
	{
		jjtThis.setTable(groupSymbol(table));
		return jjtThis;
	}
}

/*
name=create temporary table
description=Creates a temporary table.
example={code:sql}CREATE LOCAL TEMPORARY TABLE tmp (col integer){code}
*/
CommandImpl createTempTable(ParseInfo info) #CreateImpl :
{
    String table = null;
    String pkId = null;
    Column col = null;
    List<ElementSymbolImpl> pk = null;
    boolean localToken = false;
}
{
    <CREATE>
    [<LOCAL>
     {
        localToken = true;
     }
    ]

    <TEMPORARY>
    {
      if(! localToken)
        // LOCAL is only optional for Teiid 8.5+        requiresVersionAtLeast(Version.TEIID_8_5);
    }
    <TABLE>
    table = id(null)
    <LPAREN>
    {
        jjtThis.setTable(groupSymbol(table));
    }
    col = tableElement(info)
    {
      jjtThis.getColumns().add(col);
    }
    (LOOKAHEAD(2) <COMMA>
      col = tableElement(info)
      {
        jjtThis.getColumns().add(col);
      }
    )*  
    [<COMMA> <PRIMARY> <KEY> 
      pk = columnList(true, true)
      {
        jjtThis.getPrimaryKey().addAll(pk);
      }   
    ]
    <RPAREN>
    {
        return jjtThis;
    }
}

/*
name=temporary table element
description=Defines a temporary table column.
example={code:sql}col string NOT NULL{code}
*/
Column tableElement(ParseInfo info) :
{
    String element = null;
    ParsedDataType type = null;
    boolean autoIncrement = false;
    //TODO: once we support udts, then this will need to inherit the nullability from the type
    boolean notNull = false;
}
{
     element = id(Boolean.TRUE)
     (
      type = parseDataType()
      |
      <SERIAL>
      {
        type = new ParsedDataType("INTEGER");
        autoIncrement = true;
        notNull = true;
      }
     )
     [<NOT> <NULL> { notNull = true; }]
     {
        Column c = new Column(getVersion());
        c.setName(element);
        c.setRuntimeType(type.getType());
        c.setAutoIncremented(autoIncrement);
        c.setNullType(notNull?NullType.No_Nulls:NullType.Nullable);
        return c;
     }
}

/*
name=raise error statement
description=Raises an error with the given message.
example={code:sql}ERROR 'something went wrong'{code}
*/
RaiseStatementImpl errorStatement(ParseInfo info) :
{
    BaseExpression errMsg = null;
}
{ 
    <ERROR>
    errMsg = expression(info)

    {
        ExceptionExpressionImpl ee = exceptionExpression();
        ee.setMessage(errMsg);
        return raiseStatementFromExpression(ee);
    }
}

/*
name=raise statement
description=Raises an error or warning with the given message.
example={code:sql}RAISE SQLEXCEPTION 'something went wrong'{code}
*/
RaiseStatementImpl raiseStatement(ParseInfo info) :
{
    RaiseStatementImpl stmt = null;
    BaseExpression err = null;
    boolean warning = false;
}
{ 
    <RAISE>
    [<SQLWARNING> {warning = true;}]
    err = exceptionReference(info)
    {
        stmt = raiseStatementFromExpression(err);
        stmt.setWarning(warning);
        return stmt;       
    }
}

RaiseStatementImpl raiseStatementFromExpression(BaseExpression expression) #RaiseStatementImpl :
{
}
{
    {
      jjtThis.setExpression(expression);
      return jjtThis;
    }
}

/*
name=exception reference
description=a reference to an exception
example={code:sql}SQLEXCEPTION 'something went wrong' SQLSTATE '00X', 2{code}
*/
BaseExpression exceptionReference(ParseInfo info) :
{
	String id = null;
	BaseExpression ex;
}
{
	id = id(null) {return elementSymbol(id);}
	|
	ex = exception(info)
	{
		return ex;
	}
}

/*
name=sql exception
description=creates a sql exception or warning with the specified message, state, and code
example={code:sql}SQLEXCEPTION 'something went wrong' SQLSTATE '00X', 2{code}
*/
BaseExpression exception(ParseInfo info) :
{
	BaseExpression err = null;
	BaseExpression sqlState = null;
	BaseExpression errCode = null;
	BaseExpression parent = null;
}
{
    <SQLEXCEPTION>
	err = commonValueExpression(info)
	[<SQLSTATE> sqlState = commonValueExpression(info)
     [<COMMA> errCode = commonValueExpression(info)]
    ]
    [<CHAIN> parent = exceptionReference(info)]
	{
		ExceptionExpressionImpl ee = exceptionExpression();
		ee.setMessage(err);
		ee.setSqlState(sqlState);
		ee.setErrorCode(errCode);
		ee.setParent(parent);
		return ee;
	}	
}

ExceptionExpressionImpl exceptionExpression() #ExceptionExpressionImpl :
{
}
{
    {
        return jjtThis;
    }
}

/*
name=statement
description=A procedure statement.
example={code:sql}IF (x = 5) BEGIN ... END{code}
*/
StatementImpl statement(ParseInfo info) :
{
    StatementImpl stmt;
    String label = null;
}
{
    (
	 LOOKAHEAD(2) ([label = id(null) <COLON>] 
	  (
	   stmt = loopStatement(info) |
	   stmt = whileStatement(info) |
	   stmt = compoundStatement(info)
	  )
	  {
	  	((Labeled)stmt).setLabel(label);
	  }
	 )
	 |
	 (
      stmt = ifStatement(info) |
      stmt = delimitedStatement(info)
	 )
	)
    
    {
        return stmt;
    }
}

/*
name=delimited statement
description=A procedure statement terminated by ;.
example={code:sql}SELECT * FROM tbl;{code}
*/
StatementImpl delimitedStatement(ParseInfo info) :
{
    StatementImpl stmt = null;
}           
{
     (LOOKAHEAD(2) stmt = assignStatement(info) |
	  stmt = sqlStatement(info) |
      stmt = errorStatement(info) |
      stmt = raiseStatement(info) |
	  stmt = declareStatement(info) |
	  stmt = branchingStatement(info) |
	  stmt = returnStatement(info)
	 )
	 <SEMICOLON>
	 {
	     return stmt;
	 }
}

/*
name=compound statement
description=A procedure statement block contained in BEGIN END.
example={code:sql}BEGIN NOT ATOMIC ... END{code}
*/
BlockImpl compoundStatement(ParseInfo info) :
{
    StatementImpl stmt = null;
    BlockImpl block = block();
    Boolean atomic = null;
    String eId = null;
}
{
    <BEGIN> [[<NOT> {atomic = Boolean.FALSE;}] <ATOMIC> {if (atomic == null) {atomic = Boolean.TRUE;}}]
    (LOOKAHEAD(2)
      stmt = statement(info)
      {
        block.addStatement(stmt, false);            	                	    
	  }
 	)*
 	[<EXCEPTION> eId = id(Boolean.FALSE) {block.setExceptionGroup(eId);}
 	 (
       stmt = statement(info)
       {
         block.addStatement(stmt, true);            	                	    
	   }
 	 )*
 	]
    <END>
    {
        if (atomic != null) {
        	block.setAtomic(atomic);
        }
        return block;
    }
}        

/*
name=branching statement
description=A procedure branching control statement, which typically specifies a label to return control to.
example={code:sql}BREAK x{code}
*/
BranchingStatementImpl branchingStatement(ParseInfo info) #BranchingStatementImpl :
{
    Token mode = null;
    String label = null;
}
{
 	(
 	 (
 	  (mode = <BREAK> | mode = <CONTINUE>) [label = id(null)] 
 	 )
 	 | 
 	 (mode = <LEAVE> label = id(null))
 	)
 	{
 	    jjtThis.setMode(BranchingStatementImpl.BranchingMode.valueOf(mode.image.toUpperCase()));
 	    jjtThis.setLabel(label);
 		return jjtThis;
 	}
} 	

/*
name=return statement
description=A return statement.
example={code:sql}RETURN 1{code}
*/
ReturnStatementImpl returnStatement(ParseInfo info) #ReturnStatementImpl :
{
    BaseExpression ex = null;
}
{
 	<RETURN> [ex = expression(info)]
 	{
 	    jjtThis.setExpression(ex);
 	    return jjtThis;
 	}
} 	

/*
name=while statement
description=A procedure while statement that executes until its condition is false.
example={code:sql}WHILE (var) BEGIN ... END{code}
*/
WhileStatementImpl whileStatement(ParseInfo info) #WhileStatementImpl :
{
    CriteriaImpl criteria = null;
    StatementImpl stmt = null;
}
{
    <WHILE>
    <LPAREN>  
    criteria = criteria(info)
    <RPAREN>
    stmt = statement(info)
    {
        jjtThis.setCondition(criteria);
        jjtThis.setBlock(asBlock(stmt));
        return jjtThis;
    }    
}    

/*
name=loop statement
description=A procedure loop statement that executes over the given cursor.
example={code:sql}LOOP ON (SELECT * FROM tbl) AS x BEGIN ... END{code}
*/
LoopStatementImpl loopStatement(ParseInfo info) #LoopStatementImpl :
{
    String cursor = null;
    QueryCommandImpl query = null;
    StatementImpl stmt = null;
}
{
    <LOOP>
    <ON>
    <LPAREN>  
    query = queryExpression(info)
    <RPAREN>
    <AS>
    cursor = id(null)
    stmt = statement(info)
    {
        jjtThis.setBlock(asBlock(stmt));
        jjtThis.setCommand(query);
        jjtThis.setCursorName(cursor);   
        return jjtThis;
    }    
}   

/*
name=if statement
description=A procedure loop statement that executes over the given cursor.
example={code:sql}IF (boolVal) BEGIN variables.x = 1 END ELSE BEGIN variables.x = 2 END{code}
*/
IfStatementImpl ifStatement(ParseInfo info) #IfStatementImpl :
{
    CriteriaImpl criteria = null;
    StatementImpl ifStatement = null;
    StatementImpl elseStatement = null;
}
{
    <IF>
    <LPAREN>  
    criteria = criteria(info)
    <RPAREN>
    ifStatement = statement(info)
    //else blocks will be associated with the closest if block
    [LOOKAHEAD(1)<ELSE> elseStatement = statement(info)]
    {
        jjtThis.setCondition(criteria);
        jjtThis.setIfBlock(asBlock(ifStatement));
        jjtThis.setElseBlock(asBlock(elseStatement));
        return jjtThis;
    }    
}    
            
/*
name=declare statement
description=A procedure declaration statement that creates a variable and optionally assigns a value.
example={code:sql}DECLARE STRING x = 'a'{code}
*/
DeclareStatementImpl declareStatement(ParseInfo info) #DeclareStatementImpl :
{
    String var = null;    
    ParsedDataType type = null;  
    ElementSymbolImpl variableID = null;
    BaseLanguageObject value = null;
}
{
    <DECLARE>
    (type = parseDataType() | <EXCEPTION> {type = new ParsedDataType(getToken(0).image);})
    var = id(null)
    {
        variableID = elementSymbol(var);
    }
    [<EQ>
     value = assignStatementOperand(info)
    ]
    
    {
        jjtThis.setVariable(variableID);
        jjtThis.setVariableType(type.getType());
        if (value instanceof BaseExpression) {
            jjtThis.setExpression((BaseExpression)value);
    	}
    	else if (value instanceof QueryCommandImpl) {
    	    jjtThis.setExpression(scalarSubquery((QueryCommandImpl)value));
    	}
    	else {
    	    jjtThis.setCommand((CommandImpl)value);
    	}

        return jjtThis;
    }
}

/*
name=assignment statement
description=Assigns a variable a value in a procedure.
example={code:sql}x = 'b'{code}
*/
StatementImpl assignStatement(ParseInfo info) :
{
    BaseLanguageObject value = null;
    String var = null;
    ElementSymbolImpl elementID = null;
    boolean returnable=true;
}
{
    var = id(null)
    {
        elementID = elementSymbol(var);              
    } 
    <EQ>
    (value = assignStatementOperand(info) |
     (value = storedProcedure(info, 2) [(<WITH>|<WITHOUT> {returnable = false;}) <RETURN>]) {
		StoredProcedureImpl storedProcedure = (StoredProcedureImpl)value;
	    SPParameterImpl parameter = new SPParameterImpl(this, 1, SPParameterImpl.RETURN_VALUE, "return"); //$NON-NLS-1$
	    parameter.setExpression(elementID);
		storedProcedure.addParameter(parameter);  
		storedProcedure.setCalledWithReturn(true);
		CommandStatementImpl cs = createASTNode(ASTNodes.COMMAND_STATEMENT);
		cs.setCommand(storedProcedure);
		cs.setReturnable(returnable);
		return cs;      	    
     }
    )

    {
        return assignmentStatement(elementID, value);
    }    
}

/*
name=assignment statement operand
description=A value or command that can be used in an assignment.  {note}All assigments except for expression are deprecated.{note}
*/
BaseLanguageObject assignStatementOperand(ParseInfo info) :
{
    BaseLanguageObject value = null;
}
{
    (
	  LOOKAHEAD(<INSERT><INTO>) (value = insert(info)) | //deprecated
      value = update(info) | //deprecated
      value = delete(info) | //deprecated
      LOOKAHEAD(1) value = expression(info) |      
      value = queryExpression(info) | //deprecated should be a scalar subquery
      value = exception(info)
    ) 
    {   
        return value;
    }    
}

/*
name=data statement
description=A procedure statement that executes a SQL statement.  An update statement can have its update count accessed via the ROWCOUNT variable. 
*/
CommandStatementImpl sqlStatement(ParseInfo info) #CommandStatementImpl :
{
    CommandImpl cmd = null;
    String var = null;
    ElementSymbolImpl elementID = null;
    StoredProcedureImpl storedProcedure = null;
    boolean returnable = true;
}
{
    (LOOKAHEAD(2) cmd = userCommand(info) |
     cmd = dynamicCommand(info)
    ) [(<WITH>|<WITHOUT> {returnable = false;}) <RETURN>]
  
    {
        jjtThis.setCommand(cmd);
    	jjtThis.setReturnable(returnable);
    	return jjtThis;
    }   
}
 
/*
unused=true
*/
CreateProcedureCommandImpl createProcedure(ParseInfo info) # CreateProcedureCommandImpl :
{
     StatementImpl stmt = null;
}
{ 
    <CREATE> [<VIRTUAL>] <PROCEDURE>
    stmt = statement(info)
    {
        jjtThis.setBlock(asBlock(stmt));
        return jjtThis;
    }
}

/*
name=procedure body definition
description=Defines a procedure body on a Procedure metadata object.
example={code:sql}BEGIN ... END{code} // Teiid 8.5+
example={code:sql}CREATE VIRTUAL PROCEDURE BEGIN ... END{code} Teiid 8.4-
index=true
*/
CreateProcedureCommandImpl procedureBodyCommand(ParseInfo info) :
{
    CreateProcedureCommandImpl procCmd = createASTNode(ASTNodes.CREATE_PROCEDURE_COMMAND);
    StatementImpl stmt = null;
}
{ 
    [LOOKAHEAD(2) <CREATE> [<VIRTUAL>] <PROCEDURE>]
    stmt = statement(info)
    {
        procCmd.setBlock(asBlock(stmt));
        return procCmd;
    }
} 

/*
name=dynamic data statement
description=A procedure statement that can execute arbitrary sql.
example={code:sql}EXECUTE IMMEDIATE 'SELECT * FROM tbl' AS x STRING INTO #temp{code}
*/
DynamicCommandImpl dynamicCommand(ParseInfo info) #DynamicCommandImpl :
{
    BaseExpression sql = null;           
    String groupID = null;
	GroupSymbolImpl group = null;
	int updateCount = 0;
	List<ProjectedColumnImpl> elements = null;
	SetClauseListImpl using = null;
	SetClauseListImpl setClauseList = null;
}
{ 
    (<EXECUTE>|<EXEC>) [(<STRING>|<IMMEDIATE>)]
    sql = expression(info)
    {
        jjtThis.setSql(sql);
    }
    [<AS> 
	elements = createElementsWithTypes(info)

	 [<INTO>
      groupID = id(null)
      {
         group = groupSymbol(groupID);
      }
     ]
     {
         jjtThis.setIntoGroup(group);
         List<ElementSymbolImpl> symbols = new ArrayList(elements.size());
         for (ProjectedColumnImpl col : elements) {
         	symbols.add(col.getSymbol());
         }
         jjtThis.setAsColumns(symbols);
         jjtThis.setAsClauseSet(true);
     }
	]
    [<USING>
     using = setClauseList(true, info)
	 {
	     jjtThis.setUsing(using);
	 }
    ]
    [<UPDATE>
     (updateCount = intVal()
     |
     <STAR> 
     {	
        updateCount = 2;
     })
    ]
    {
        jjtThis.setUpdatingModelCount(updateCount);
        return jjtThis; 
    }
}

/*
name=set clause list
description=A list of value assignments.
example={code:sql}col1 = 'x', col2 = 'y' ...{code}
*/
SetClauseListImpl setClauseList(boolean shortName, ParseInfo info) #SetClauseListImpl :
{
	String element = null;
	BaseExpression value = null;
}
{
	element = id(shortName?Boolean.TRUE:null)
    <EQ>
    value = expression(info)
    {
        ElementSymbolImpl symbol = elementSymbol(element);
        jjtThis.addClause(setClause(symbol, value));
    }
	(<COMMA>
	 element = id(null)
     <EQ>
     value = expression(info)
     {
     	  symbol = elementSymbol(element);
          jjtThis.addClause(setClause(symbol, value));
     }
	)*
	{
		return jjtThis;
	}
}

SetClauseImpl setClause(ElementSymbolImpl symbol, BaseExpression value) #SetClauseImpl :
{
}
{
    {
        jjtThis.setSymbol(symbol);
        jjtThis.setValue(value);
        return jjtThis;
    }
}

/*
name=typed element list
description=A list of typed elements.
example={code:sql}col1 string, col2 integer ...{code}
*/
List<ProjectedColumnImpl> createElementsWithTypes(ParseInfo info) :
{
	String element = null;
	ParsedDataType type = null;
	List<ProjectedColumnImpl> elements = new ArrayList<ProjectedColumnImpl>();
}
{
	 element = id(Boolean.TRUE)
	 type = parseDataType()
	 {
	    ProjectedColumnImpl symbol = projectedColumn(element, type.getType());
		elements.add(symbol);
	 }
	 (LOOKAHEAD(2) <COMMA>
		element = id(Boolean.TRUE)
		type = parseDataType()
		{
	      symbol = projectedColumn(element, type.getType());
		  elements.add(symbol);
		}
	 )*
	 {
	 	return elements;
	 }
}

ProjectedColumnImpl projectedColumn(String name, String type) #ProjectedColumnImpl :
{
}
{
    {
        jjtThis.setName(name);
        jjtThis.setType(type);
        return jjtThis;
    }
}

/*
name=callable statement
description=A callable statement defined using JDBC escape syntax.
example={code:sql}{? = CALL proc}{code}
index=true
*/
StoredProcedureImpl callableStatement(ParseInfo info) :
{
	StoredProcedureImpl storedProcedure = newStoredProcedure();
	storedProcedure.setCallableStatement(true);
	String procName = null;
	OptionImpl option = null;
	SPParameterImpl parameter = null;
	int parameterIndex = 1;
	List<BaseExpression> values = null;
}
{
	<LBRACE>
	[<QMARK> <EQ>
	 {
	   parameter = new SPParameterImpl(this, parameterIndex++, SPParameterImpl.RETURN_VALUE, "return"); //$NON-NLS-1$
	   storedProcedure.addParameter(parameter);
	   storedProcedure.setCalledWithReturn(true);
	 }
	]
	<CALL> procName = id(null)
	{
		storedProcedure.setProcedureName(procName);
	}
		
	//parameters
		
	[<LPAREN>
	  (LOOKAHEAD(2)
        executeNamedParams(info, storedProcedure, parameterIndex)
        |      
        [values = expressionList(info) { convertToParameters(values, storedProcedure, parameterIndex); }]
      )
	 <RPAREN>
	]
	<RBRACE>			
	[option = option(info)
	 {
	   storedProcedure.setOption(option);
	 }
	]

	{
		return storedProcedure;
	}
}

/*
name=call statement
description=Executes the procedure with the given parameters.
example={code:sql}CALL proc('a', 1){code}
*/
StoredProcedureImpl storedProcedure(ParseInfo info, int startIndex) :
{
	String procName = null;
	OptionImpl option = null;
	List<BaseExpression> values = null;
	StoredProcedureImpl storedProcedure = newStoredProcedure();
	SourceHintImpl sourceHint = null;
}
{
    { if (versionAtLeast(Version.TEIID_8_4)) sourceHint = getSourceHint(this); }
	(
		(<EXEC> | <EXECUTE> | <CALL>)
		procName = id(null)
		{
			storedProcedure.setProcedureName(procName);
		}
		
		//parameters
		<LPAREN>
		
		(
		 LOOKAHEAD(2)
		 executeNamedParams(info, storedProcedure, startIndex)
		 | 		
		 [values = expressionList(info) { convertToParameters(values, storedProcedure, startIndex); }]
		)
		
		<RPAREN>
	)
	[option = option(info)
	 {
	   storedProcedure.setOption(option);
	 }
	]
	{
	    if (versionAtLeast(Version.TEIID_8_4))
	      storedProcedure.setSourceHint(sourceHint);

		return storedProcedure;
	}
}

StoredProcedureImpl newStoredProcedure() #StoredProcedureImpl :
{
}
{
    {
        return jjtThis;
    }
}

/*
name=named parameter list
description=A list of named parameters.
example={code:sql}param1 => 'x', param2 => 1{code}
*/
void executeNamedParams(ParseInfo info, StoredProcedureImpl storedProcedure, int parameterIndex) :
{
	String name = null;
    BaseExpression value = null;
	SPParameterImpl parameter = null;
}
{
	{
		storedProcedure.setDisplayNamedParameters(true);
	}
	(name=id(null)
	 <EQ> [<GT>]
	 value = expression(info)
		{
			parameter = new SPParameterImpl(this, parameterIndex++, value);
			parameter.setName(name);
			parameter.setParameterType(SPParameterImpl.IN);
			storedProcedure.addParameter(parameter);
			parameter = null;
		}
		(	<COMMA>
		 	name=id(null)
	 		<EQ> [<GT>]
	 		value = expression(info)
			{
				parameter = new SPParameterImpl(this, parameterIndex++, value);
				parameter.setName(name);
				parameter.setParameterType(SPParameterImpl.IN);
				storedProcedure.addParameter(parameter);
				parameter = null;
			}
		)*
	)
}

/*
name=insert statement
description=Inserts values into the given target.
example={code:sql}INSERT INTO tbl (col1, col2) VALUES ('a', 1){code}
*/
InsertImpl insert(ParseInfo info) #InsertImpl :
{
	boolean merge = false;
	String group = null;
	List values = null;
	List<ElementSymbolImpl> columns = null;
	OptionImpl option = null;
	QueryCommandImpl query = null;
}
{
	(<INSERT>|<MERGE>{merge=true;}) <INTO>
	group = id(null)

	[LOOKAHEAD(<LPAREN> id(null)) columns = columnList(false, true) {
	  jjtThis.setVariables(columns);
	}]

	(
      query = queryExpression(info)
      {
        jjtThis.setQueryExpression(query);
      }
	)
	
	[ option = option(info)
	  {
	    jjtThis.setOption(option);
	  }
	]
	
	{
		// Store group
		jjtThis.setGroup(groupSymbol(group) );
		jjtThis.setMerge(merge);
		return jjtThis;
	}
}

/*
name=expression list
description=A list of expressions.
example={code:sql}col1, 'a', ...{code}
*/
ArrayList<BaseExpression> expressionList(ParseInfo info) :
{
	ArrayList<BaseExpression> rowVals = new ArrayList<BaseExpression>(4);
	BaseExpression value = null;
}
{
	value = expression(info)
	{
        rowVals.add(value);
	}
	(	<COMMA>
	    value = expression(info)
	    {
            rowVals.add(value);
	    }
	)*
	{
		return rowVals;
	}
}

/*
name=update statement
description=UpdateImpl values in the given target.
example={code:sql}UPDATE tbl SET (col1 = 'a') WHERE col2 = 1{code}
*/
UpdateImpl update(ParseInfo info) #UpdateImpl :
{
	String group = null;
	SetClauseListImpl setClauseList = null;
	CriteriaImpl criteria = null;
	OptionImpl option = null;
}
{
	<UPDATE>
	group = id(null)
	<SET>
	setClauseList = setClauseList(false, info)
	{
		jjtThis.setChangeList(setClauseList);
	}
	[ criteria = where(info) ]
	[option = option(info)
	  {
	   jjtThis.setOption(option);
	  }
	]
	{	
		// Store group
		jjtThis.setGroup(groupSymbol( group) );
		
		// Store optional criteria
		if(criteria != null) {
			jjtThis.setCriteria(criteria);
		}
		
		return jjtThis;
	}
}

/*
name=delete statement
description=DeleteImpl rows from the given target.
example={code:sql}DELETE FROM tbl WHERE col2 = 1{code}
*/
DeleteImpl delete(ParseInfo info) #DeleteImpl :
{
	String group = null;
	CriteriaImpl criteria = null;
	OptionImpl option = null;
}
{
	<DELETE> <FROM>
	group = id(null)
	[criteria = where(info)]
	[option = option(info)
	  {
	   jjtThis.setOption(option);
	  }
	]
	{
		jjtThis.setGroup(groupSymbol(group));
		jjtThis.setCriteria(criteria);
		        
        return jjtThis; 
	}
}

/*
name=query expression
description=A declarative query for data.
example={code:sql}SELECT * FROM tbl WHERE col2 = 1{code}
*/
QueryCommandImpl queryExpression(ParseInfo info) :
{
    QueryCommandImpl queryCommand = null;
	List<WithQueryCommandImpl> withList = null;
	WithQueryCommandImpl withQueryCommand = null;
	SourceHintImpl sourceHint = null;
}
{
	[<WITH> withQueryCommand = withListElement(info)
	  {
	    withList = new LinkedList<WithQueryCommandImpl>();
	    withList.add(withQueryCommand);
	  }
	  (	<COMMA>
	    withQueryCommand = withListElement(info)
	    {
            withList.add(withQueryCommand);
	    }
	  )*
	]
	{ if (versionAtLeast(Version.TEIID_8_4)) sourceHint = getSourceHint(this); }
	queryCommand = queryExpressionBody(info)
	{
		queryCommand.setWith(withList);

		if (versionAtLeast(Version.TEIID_8_4))
		  setSourceHint(sourceHint, queryCommand);

		return queryCommand;
	}
}

/*
name=with list element
description=A query expression for use in the enclosing query. 
example={code:sql}X (Y, Z) AS (SELECT 1, 2){code}
*/
WithQueryCommandImpl withListElement(ParseInfo info) #WithQueryCommandImpl :
{
   String name = null;
   List<ElementSymbolImpl> columns = null;
   QueryCommandImpl queryExpression = null;
}
{
	name = id(Boolean.FALSE)
	[ columns = columnList(true, true)] 
	<AS> <LPAREN> queryExpression = queryExpression(info) <RPAREN>
	{
	    jjtThis.setGroupSymbol(groupSymbol(name));
	    jjtThis.setColumns(columns);
	    jjtThis.setQueryExpression(queryExpression);
	    return jjtThis;
	}
}

/*
name=query expression body
description=The body of a query expression, which can optionally be ordered and limited.
example={code:sql}SELECT * FROM tbl ORDER BY col1 LIMIT 1{code}
*/
QueryCommandImpl queryExpressionBody(ParseInfo info) :
{
    QueryCommandImpl query = null;
    QueryCommandImpl rightQueryImpl = null;
    boolean all = false;
    OptionImpl option = null;
	OrderByImpl orderby = null;
	LimitImpl limit = null;
	SetQueryImpl.Operation type;
}
{
	query = queryTerm(info) 
	(	(LOOKAHEAD( <UNION>, { getToken(2).kind != JOIN } ) <UNION> { type = SetQueryImpl.Operation.UNION; } | <EXCEPT> { type = SetQueryImpl.Operation.EXCEPT; }) 
 	 	[<ALL> { all = true; } | <DISTINCT>]
 	 	rightQueryImpl = queryTerm(info)
 	   	{
 	   		query = setQuery(type, all, query, rightQueryImpl);
    		all = false;
	   	}
	) *
    [orderby  = orderby(info) {query.setOrderBy( orderby );}]
    [limit    = limit(info) {query.setLimit( limit );}]
    [LOOKAHEAD(<OPTION>) option = option(info) { query.setOption(option);  }	]
    {
		return query;
    }    
}

/*
name=query term
description=Used to establish INTERSECT precedence.
example={code:sql}SELECT * FROM tbl{code}\n{code:sql}SELECT * FROM tbl1 INTERSECT SELECT * FROM tbl2{code}
*/
QueryCommandImpl queryTerm(ParseInfo info) :
{
    QueryCommandImpl query = null;
    QueryCommandImpl rightQueryImpl = null;
    boolean all = false;
}
{
	query=queryPrimary(info) 
	(	<INTERSECT> 
 		[<ALL> { all = true; } | <DISTINCT>] 
 		rightQueryImpl=queryPrimary(info)
 		{
 	   		query = setQuery(SetQueryImpl.Operation.INTERSECT, all, query, rightQueryImpl);
    		all = false;
 		}
	) *
    {
        return query;
    }
}    

SetQueryImpl setQuery(SetQueryImpl.Operation operation, boolean all, QueryCommandImpl leftQueryImpl, QueryCommandImpl rightQueryImpl) #SetQueryImpl :
{
}
{
    {
        jjtThis.setOperation(operation);
        jjtThis.setAll(all);
        jjtThis.setLeftQuery(leftQueryImpl);
        jjtThis.setRightQuery(rightQueryImpl);
        return jjtThis;
    }
}

/*
name=query primary
description=A declarative source of rows.
example={code:sql}TABLE tbl{code}\n{code:sql}SELECT * FROM tbl1{code}
*/
QueryCommandImpl queryPrimary(ParseInfo info) :
{
    QueryCommandImpl query = null;
    QueryImpl q = null;
    SelectImpl select = null;
    String name = null;
    List<BaseExpression> expr = null;
}
{
    (
        query=query(info) |
        (<VALUES> <LPAREN> expr = expressionList(info) 
         {
           select = createASTNode(ASTNodes.SELECT);
           select.setSymbols(expr);

           q = createASTNode(ASTNodes.QUERY);
           q.setSelect(select);
           q.setRowConstructor(true);
           query = q;           
         }
         <RPAREN> 
          (<COMMA> <LPAREN> expr = expressionList(info) 
           {
             requiresVersionAtLeast(Version.TEIID_8_6);

             select = createASTNode(ASTNodes.SELECT);
             select.setSymbols(expr);

             q = createASTNode(ASTNodes.QUERY);
             q.setSelect(select);
             q.setRowConstructor(true);

             query = setQuery(SetQueryImpl.Operation.UNION, true, query, q);
           }
          <RPAREN>)*) |
        (<TABLE> name=id(null) {
           MultipleElementSymbolImpl multipleElementSymbol = createASTNode(ASTNodes.MULTIPLE_ELEMENT_SYMBOL);

           select = createASTNode(ASTNodes.SELECT);
           select.setSymbols(Arrays.asList(multipleElementSymbol));

           UnaryFromClauseImpl unaryFromClauseImpl = createASTNode(ASTNodes.UNARY_FROM_CLAUSE);
           unaryFromClauseImpl.setGroup(groupSymbol(name));

           FromImpl from = createASTNode(ASTNodes.FROM);
           from.setClauses(Arrays.asList(unaryFromClauseImpl));
           
           q = createASTNode(ASTNodes.QUERY);
           q.setSelect(select);
           q.setFrom(from);
           query = q;
        }) |
        (<LPAREN> query=queryExpressionBody(info) <RPAREN>)
    )    
    {
        return query;
    }
}    

/*
name=query
description=A SELECT query.
example={code:sql}SELECT col1, max(col2) FROM tbl GROUP BY col1{code}
*/
QueryImpl query(ParseInfo info) #QueryImpl :
{
	SelectImpl   select         = null;
	FromImpl     from           = null;
	IntoImpl 	 into			= null;
	CriteriaImpl criteria       = null;
	GroupByImpl  groupBy        = null;
	CriteriaImpl having         = null;	
}
{
    select	  = select(info)
    [into	  = into(info)]
   	[from 	  = from(info)
   		
    [criteria = where(info)]
    [groupBy  = groupBy(info)]
    [having   = having(info)]]

	{
		// Build query from parsed pieces
		jjtThis.setSelect( select );
		jjtThis.setFrom( from );
		jjtThis.setInto( into );
		jjtThis.setCriteria(criteria);
		jjtThis.setGroupBy(groupBy);
		jjtThis.setHaving(having);

		return jjtThis;
  	}
}

/*
name=into clause
description=Used to direct the query into a table.  {note}This is deprecated.  Use INSERT INTO with a query expression instead.{note}
example={code:sql}INTO tbl{code}
*/
IntoImpl into(ParseInfo info) #IntoImpl :
{
	String groupID = null;
}
{	
	<INTO>
	(groupID=id(null))
	{
	    jjtThis.setGroup(groupSymbol(groupID));
		return jjtThis;
    }	
}

/*
name=select clause
description=The columns returned by a query.  Can optionally be distinct.
example={code:sql}SELECT *{code}\n{code:sql}SELECT DISTINCT a, b, c{code}
 */
SelectImpl select(ParseInfo info) #SelectImpl :
{
	boolean isDistinct = false;		// unless DISTINCT keyword in SELECT
	BaseExpression symbol = null;
}
{
	<SELECT>
	[<ALL> | (<DISTINCT> {isDistinct=true;})]
	(<STAR>
		{
		    MultipleElementSymbolImpl multipleElementSymbol = createASTNode(ASTNodes.MULTIPLE_ELEMENT_SYMBOL);
			jjtThis.addSymbol(multipleElementSymbol);
		}
	|
		(	symbol=selectSymbol(info)      { jjtThis.addSymbol(symbol); }
		    (	<COMMA>
				symbol=selectSymbol(info)  { jjtThis.addSymbol(symbol); }
			)*
		)
	)
	{
 		jjtThis.setDistinct(isDistinct);
		return jjtThis;
	}
}

ExpressionSymbolImpl expressionSymbol() #ExpressionSymbolImpl :
{
}
{
    {
        return jjtThis;
    }
}

/*
name=select sublist
description=An element in the select clause
example={code:sql}tbl.*{code}\n{code:sql}tbl.col AS x{code}
*/
BaseExpression selectSymbol(ParseInfo info) :
{
	BaseExpression symbol = null;	
}
{
	(
		symbol = selectExpression(info)
		|
		symbol = allInGroupSymbol()
	)
	{
		return symbol;
	}
}

/*
name=select derived column
description=A select clause item that selects a single column. {note}This is slightly different than a derived column in that the AS keyword is optional.{note}
example={code:sql}tbl.col AS x{code}
*/
BaseExpression selectExpression(ParseInfo info) :
{
	BaseExpression expression = null;
    String alias = null;
}
{
	(	
		// BaseExpression
		expression=expression(info)	
		[[<AS>] alias=id(Boolean.FALSE) ]
	)
	{		
		if(alias != null) {
			return aliasSymbol(alias, expression);
		}
		return expression;
	}
}

/*
name=derived column
description=An optionally named expression.
example={code:sql}tbl.col AS x{code}
*/
DerivedColumnImpl derivedColumn(ParseInfo info) #DerivedColumnImpl :
{
	BaseExpression expression = null;
    String alias = null;
}
{
	(	
		// BaseExpression
		expression=expression(info)	
		[<AS> alias=id(Boolean.FALSE) ]
	)
	{
	    jjtThis.setAlias(alias);
	    jjtThis.setExpression(expression);
	    return jjtThis;
	}
}

/*
name=all in group 
description=A select sublist that can select all columns from the given group.
example={code:sql}tbl.*{code}
*/
MultipleElementSymbolImpl allInGroupSymbol() #MultipleElementSymbolImpl :
{
	Token allInGroupToken = null;
	
}
{
   	allInGroupToken = <ALL_IN_GROUP>    
    {
        String name = normalizeId(allInGroupToken.image.substring(0, allInGroupToken.image.length() - 2));
        jjtThis.setName(name);
		return jjtThis;
	}
}

/*
name=ordered aggreate function
description=An aggregate function that can optionally be ordered.
example={code:sql}XMLAGG(col1) ORDER BY col2{code}\n{code:sql}ARRAY_AGG(col1){code}
*/
BaseAggregateSymbol orderedAgg(ParseInfo info) :
{
    Token t = null;
	BaseExpression expression = null;
	OrderByImpl orderBy = null;
}
{
	(t=<XMLAGG>|t=<ARRAY_AGG>|t=<JSONARRAY_AGG>)
	<LPAREN>
	expression = expression(info)
	[ orderBy = orderby(info) ]
	<RPAREN>
	{
		String aggName = t.image.toUpperCase();
		BaseAggregateSymbol	agg = newBaseAggregateSymbol(aggName, false, new BaseExpression[] {expression});
		agg.setOrderBy(orderBy);
		return agg;
	}
}

/*
name=text aggreate function
description=An aggregate function for creating separated value clobs.
example={code:sql}TEXTAGG (col1 as t1, col2 as t2 DELIMITER ',' HEADER){code}
*/
BaseAggregateSymbol textAgg(ParseInfo info) :
{
	DerivedColumnImpl expression = null;
	Character delimiter = null;
	Character quote = null;
	boolean header = false;	
	List<DerivedColumnImpl> expressions = new ArrayList<DerivedColumnImpl>();
	OrderByImpl orderBy = null;
	String encoding = null;
}
{
	<TEXTAGG> <LPAREN>
	[<FOR>] expression = derivedColumn(info)
	{
		expressions.add(expression);
	}
	(<COMMA>
		expression = derivedColumn(info)
		{
			expressions.add(expression);
		}
	)* 		
	[
	  <DELIMITER>
	  delimiter = charVal(info, "DELMITER")
	]
	[
	  <QUOTE>
	  quote = charVal(info, "QUOTE")
	]
	[
	  <HEADER>
	  { header = true; }
	]	
	[
	  <ENCODING>
	  encoding = id(null) 
	]
	[
		orderBy = orderby(info)
	]	
	<RPAREN>
	{
		TextLineImpl tf = textLine();
		tf.setDelimiter(delimiter);
		tf.setQuote(quote);
		tf.setIncludeHeader(header);
		tf.setExpressions(expressions);
		tf.setEncoding(encoding);
		BaseAggregateSymbol agg = newBaseAggregateSymbol("TEXTAGG", false, new BaseExpression[] {tf});
		agg.setOrderBy(orderBy);
		return agg;		
	}
}

/*
name=standard aggregate function
description=A standard aggregate function.
example={code:sql}COUNT(*){code}
*/
BaseAggregateSymbol aggregateSymbol(ParseInfo info) :
{
	Token func = null;
	Token starToken = null;
    BaseAggregateSymbol agg = null;
	boolean isDistinct = false;
	BaseExpression expression = null;
}
{
	(
		// COUNT(*)
		LOOKAHEAD(3) (func = <COUNT>
			<LPAREN>
			starToken = <STAR>
			<RPAREN> )	
		| 
		// Remaining aggregates
		(	(<COUNT> | <SUM> | <AVG> | <MIN> | <MAX> | <EVERY> | <STDDEV_POP> | <STDDEV_SAMP> | <VAR_SAMP> | <VAR_POP> | <SOME> | <ANY>) {func = getToken(0);}
			<LPAREN>
			[ <DISTINCT> {isDistinct=true;} | <ALL>]
			expression = expression(info)
			<RPAREN>
		)
	)
	{
	    
		String name = func.image.toUpperCase();
		if(starToken == null) { 
			// Aggregate
			agg = newBaseAggregateSymbol(name, isDistinct, new BaseExpression[] {expression});
		} else {
			// COUNT(*)
			agg = newBaseAggregateSymbol(name, false, null);
		}
		return agg;
	}
}

/*
name=analytic aggregate function
description=An analytic aggregate function.
example={code:sql}ROW_NUMBER(){code}
*/
BaseAggregateSymbol analyticBaseAggregateSymbol(ParseInfo info) :
{
	Token func = null;
}
{
	(<ROW_NUMBER> | <RANK> | <DENSE_RANK>) {func = getToken(0);}
	<LPAREN> <RPAREN>
	{
		return newBaseAggregateSymbol(func.image.toUpperCase(), false, null);	
	}
}

/*
name=filter clause
description=An aggregate filter clause applied prior to accumulating the value.
example={code:sql}FILTER (WHERE col1='a'){code}
*/
BaseExpression filterClause(ParseInfo info) :
{
	BaseExpression condition = null;
}
{
	<FILTER> <LPAREN> <WHERE> condition = booleanPrimary(info) <RPAREN>
	{
		return condition;	
	}
}

/*
name=from clause
description=A query from clause containing a list of table references.
example={code:sql}FROM a, b{code}\n{code:sql}FROM a right outer join b, c, d join e".</p>{code}
*/
FromImpl from(ParseInfo info) #FromImpl :
{
	FromClauseImpl clause = null;
	List clauseList = new LinkedList();
}
{
	<FROM>
	(	clause = tableReference(info)
		{
			clauseList.add(clause);
			clause = null;
		}
		
		(<COMMA> clause = tableReference(info)
			{
				clauseList.add(clause);
				clause = null;
			}
		)*
	) 

	{
	    jjtThis.setClauses(clauseList);
		return jjtThis;
	}
}					

/*
name=table reference
description=An optionally escaped joined table.
example={code:sql}a{code}\n{code:sql}a inner join b{code}
*/
FromClauseImpl tableReference(ParseInfo info) :
{
	FromClauseImpl result = null;
}
{	
	(
		(	
			<ESCAPEDJOIN>
			result=joinedTable(info)
			<RBRACE>
		) 
		|
		result=joinedTable(info)
	)
	{
		return result;
	}
}	

/*
name=joined table
description=A table or join.
example={code:sql}a{code}\n{code:sql}a inner join b{code}
*/
FromClauseImpl joinedTable(ParseInfo info) :
{
	FromClauseImpl result = null;
	JoinPredicateImpl jp = null;
}
{
	result = tablePrimary(info) /* this is a fix for left recursion in the spec */
	( LOOKAHEAD(2)	
		(	jp = crossJoin(info)
			| jp = qualifiedJoin(info)
		)
		{
			jp.setLeftClause(result);
			result = jp;
		}
	) *
	{
		return result;
	}
}

/*
name=cross join
description=A cross join.
example={code:sql}a CROSS JOIN b{code}
*/
JoinPredicateImpl crossJoin(ParseInfo info) :
{
    JoinPredicateImpl result = joinPredicate();
	FromClauseImpl clause = null;
}
{
	(	(<CROSS> {result.setJoinType(joinType(JoinType.Types.JOIN_CROSS));}|<UNION> {result.setJoinType(joinType(JoinType.Types.JOIN_UNION));})
    	<JOIN> 
		clause = tablePrimary(info) {result.setRightClause(clause);}
	)
	{
		return result;
	}
}

/*
name=qualified table
description=An INNER or OUTER join.
example={code:sql}a inner join b{code}
*/
JoinPredicateImpl qualifiedJoin(ParseInfo info) :
{
	JoinPredicateImpl result = joinPredicate();
	FromClauseImpl clause = null;
	CriteriaImpl onCriteria = null;
}
{
	(	[	(<RIGHT> {result.setJoinType(joinType(JoinType.Types.JOIN_RIGHT_OUTER));} [<OUTER>])
    		| (<LEFT> {result.setJoinType(joinType(JoinType.Types.JOIN_LEFT_OUTER));} [<OUTER>])
    		|  (<FULL> {result.setJoinType(joinType(JoinType.Types.JOIN_FULL_OUTER));} [<OUTER>])
    		| <INNER>
		]
		<JOIN>
		clause = tableReference(info) {result.setRightClause(clause);}
		<ON>
		onCriteria = criteria(info) {result.setJoinCriteria(CriteriaImpl.separateCriteriaByAnd(onCriteria));}
	)
	{
		return result;
	}
}

JoinPredicateImpl joinPredicate() #JoinPredicateImpl :
{
}
{
    {
        return jjtThis;
    }
}

JoinTypeImpl joinType(JoinType.Types kind) #JoinTypeImpl :
{
}
{
    {
        jjtThis.setKind(kind);
        return jjtThis;
    }
}

/*
name=table primary
description=A single source of rows.
example={code:sql}a{code}
*/
FromClauseImpl tablePrimary(ParseInfo info) :
{
	FromClauseImpl clause = null;
	Token lparen = null;
}
{
	(	LOOKAHEAD(2) clause = textTable(info)
	    |
	    LOOKAHEAD(2) clause = arrayTable(info)
	    |
	    clause = xmlTable(info)
	    |
	    LOOKAHEAD(2) clause = objectTable(info)
	    |
	    clause = unaryFromClauseImpl(info)
		|
		LOOKAHEAD(subqueryFromClauseImpl(info)) clause = subqueryFromClauseImpl(info) 
	    |			
		(lparen = <LPAREN> clause = joinedTable(info) 
		 {
			setFromClauseOptions(lparen, clause);
		 }
		 <RPAREN> 
		)
	)
	[	(<MAKEDEP>  { clause.setMakeDep(true); })
	 	| (<MAKENOTDEP> {  clause.setMakeNotDep(true); } )
	]
	{
		return clause;
	}
}

/*
name=xml serialize
description=Serializes an XML value.
example={code:sql}XMLSERIALIZE(col1 AS CLOB){code}
*/
XMLSerializeImpl xmlSerialize(ParseInfo info) #XMLSerializeImpl:
{
	BaseExpression expr = null;
	Boolean doc = null;
	Token t = null;
	String enc = null;
	Boolean declr = null;
	String ver = null;
}
{
	<XMLSERIALIZE> <LPAREN>
	[LOOKAHEAD(1) (<DOCUMENT> {doc = true;}| <CONTENT> {doc = false;})]
	expr = expression(info)
	[
		<AS> (<STRING> | <VARCHAR> | <CLOB> | <VARBINARY> | <BLOB>) { t = getToken(0);}
	]
	[ <ENCODING> enc = id(null) ]
	[ <VERSION> ver = stringVal() ]
	[ ( <INCLUDING> {declr = true;}| <EXCLUDING> {declr = false;}) <XMLDECLARATION> ]
	<RPAREN>
	{
		jjtThis.setEncoding(enc);
		jjtThis.setVersion(ver);
		jjtThis.setDeclaration(declr);
		jjtThis.setExpression(expr);
		if (doc != null) {
			jjtThis.setDocument(doc);
		}
		if (t != null) {
			jjtThis.setTypeString(t.image);
		}
		return jjtThis;
	}
}

/*
name=array table
description=The ARRAYTABLE table function creates tabular results from arrays.  It can be used as a nested table reference.
example={code:sql}ARRAYTABLE (col1 COLUMNS x STRING) AS y{code}
*/
ArrayTableImpl arrayTable(ParseInfo info) # ArrayTableImpl :
{
	BaseExpression array = null;
	List<ProjectedColumnImpl> columns;
	String aliasID = null;
}
{
 	<ARRAYTABLE> <LPAREN> array = valueExpressionPrimary(info)
 	<COLUMNS>
 	columns = createElementsWithTypes(info) 
 	<RPAREN>
 	[<AS>] aliasID=id(Boolean.FALSE)
 	{
 		jjtThis.setArrayValue(array);
 		jjtThis.setColumns(columns);
 		jjtThis.setName(aliasID);
 		return jjtThis;
 	}
}

/*
name=text table
description=The TEXTTABLE table function creates tabular results from text.  It can be used as a nested table reference.
example={code:sql}TEXTTABLE (file COLUMNS x STRING) AS y{code}
*/
TextTableImpl textTable(ParseInfo info) #TextTableImpl :
{
	BaseExpression file = null;
	TextColumnImpl column = null;
	List<TextColumnImpl> columns = new ArrayList<TextColumnImpl>();
	boolean useRowDelimiter = true;
	Character delimiter = null;
	boolean escape = false;
	Character quote = null;
	Integer header = null;
	Integer skip = null;
	String selector = null;
	String aliasID = null;
}
{
 	<TEXTTABLE> <LPAREN> file = commonValueExpression(info)
 	[
	  <SELECTOR>
	  selector = stringVal()
	]
 	<COLUMNS>
 	column = textColumn(info)
	{
		columns.add(column);
	} 
	(<COMMA>
		column = textColumn(info)
		{
			columns.add(column);
		}
	)* 
	[
	  <NO> <ROW> <DELIMITER>
	  {
	    useRowDelimiter = false;
	  }
	]
	[
	  <DELIMITER>
	  delimiter = charVal(info, "DELMITER")
	]
	[
	  (<ESCAPE> quote = charVal(info, "ESCAPE") ) { escape = true; }
	  |
	  (<QUOTE> quote = charVal(info, "QUOTE") )
	]
	[
	  <HEADER>
	  [
	  	header = intVal()
	  ]
	  {
	  	if (header == null) {
	  		header = 1;
	  	}
	  }
	]
	[
	  <SKIP_KEYWORD>
	  skip = intVal()
	]
 	<RPAREN>
 	[<AS>] aliasID=id(Boolean.FALSE)
 	{
 		jjtThis.setFile(file);
 		jjtThis.setColumns(columns);
 		jjtThis.setDelimiter(delimiter);
 		jjtThis.setEscape(escape);
 		jjtThis.setHeader(header);
 		jjtThis.setSkip(skip);
 		jjtThis.setName(aliasID);
 		jjtThis.setQuote(quote);
 		jjtThis.setUsingRowDelimiter(useRowDelimiter);
 		jjtThis.setSelector(selector);
 		return jjtThis;
 	}
}

/*
name=text table column
description=A text table column.
example={code:sql}x INTEGER WIDTH 6{code}
*/
TextColumnImpl textColumn(ParseInfo info) #TextColumnImpl :
{
	String name = null;
	ParsedDataType datatype = null;
	Integer width = null;
	boolean noTrim = false;
	String selector = null;
	Integer position = null;
}
{
	name = id(Boolean.TRUE)
	{	  jjtThis.setName(name);
	}
	(
	  (
        <FOR> <ORDINALITY> 
        {
          requiresVersionAtLeast(Version.TEIID_8_7);
          jjtThis.setOrdinal(true);
          return jjtThis; 
        }
      )
      |
      (
	    datatype = parseDataType()
	    [
	  	  <WIDTH>
	  	  width = intVal() 
	  	  [ LOOKAHEAD(2)
		    <NO> <TRIM>
		  	{
			  noTrim = true;	  	
		  	}
		  ]
	    ]
	    [
	  	  <SELECTOR>
	      selector = stringVal()
	  	  position = intVal() 
	    ]
	    {
	      jjtThis.setType(datatype.getType());
	      jjtThis.setWidth(width);
	      jjtThis.setNoTrim(noTrim);
		  jjtThis.setSelector(selector);
		  jjtThis.setPosition(position);
          return jjtThis;
	    }
	  )
    )
}

/*
name=xml query
description=Executes an XQueryImpl to return an XML result.
example={code:sql}XMLQUERY('<a>...</a>' PASSING doc){code}
*/
XMLQueryImpl xmlQueryImpl(ParseInfo info) #XMLQueryImpl :
{
	String xquery = null;
	XMLNamespacesImpl xmlNamespaces = null;
	DerivedColumnImpl passing = null;
	ArrayList<DerivedColumnImpl> passingValues = new ArrayList<DerivedColumnImpl>();
	Boolean content = null;
	Boolean empty = null;
}
{
 	<XMLQUERY> <LPAREN> 
 	[ xmlNamespaces = xmlNamespaces(info) <COMMA> ]
 	xquery = stringVal()
 	[ 
 	  <PASSING>
 	  passing = derivedColumn(info)
 	  {
 	  	passingValues.add(passing);
 	  	passing.setPropagateName(false);
 	  }
 	  (<COMMA>
 	    passing = derivedColumn(info)
 	    {
 	  	  passingValues.add(passing);
 	  	  passing.setPropagateName(false);
 	    }
 	  )*
 	]

 	[
 	  (<NULL> { empty = false; }
 	   |
 	   <EMPTY> { empty = true; }
 	  )
 	  <ON> <EMPTY>
 	]
 	<RPAREN>
 	{
 		jjtThis.setXquery(xquery);
 		jjtThis.setNamespaces(xmlNamespaces);
 		jjtThis.setPassing(passingValues);
 		jjtThis.setEmptyOnEmpty(empty);
 		return jjtThis;
 	}
}

/*
name=object table
description=Returns table results by processing a script.
example={code:sql}OBJECTTABLE('z' PASSING val AS z COLUMNS col OBJECT 'teiid_row') AS X{code}
*/
ObjectTableImpl objectTable(ParseInfo info) #ObjectTableImpl :
{
	String rowScript = null;
	String lang = null;
	DerivedColumnImpl passing = null;
	ArrayList<DerivedColumnImpl> passingValues = new ArrayList<DerivedColumnImpl>();
	ObjectColumnImpl column = null;
	ArrayList<ObjectColumnImpl> columns = new ArrayList<ObjectColumnImpl>();
	String aliasID = null;
}
{
 	<OBJECTTABLE> <LPAREN> 
 	[<LANGUAGE> lang = stringVal()]
 	rowScript = stringVal()
 	[ 
 	  <PASSING>
 	  passing = derivedColumn(info)
 	  {
 	  	passingValues.add(passing);
 	  	passing.setPropagateName(false);
 	  }
 	  (<COMMA>
 	    passing = derivedColumn(info)
 	    {
 	  	  passingValues.add(passing);
 	  	  passing.setPropagateName(false);
 	    }
 	  )*
 	]
    <COLUMNS>
    column = objectColumn(info)
    {
      columns.add(column);
    }
    (<COMMA>
      column = objectColumn(info)
      {
        columns.add(column);
      }
    )*
 	<RPAREN>
 	[<AS>] aliasID=id(Boolean.FALSE)
 	{
 		jjtThis.setScriptingLanguage(lang);
 		jjtThis.setRowScript(rowScript);
 		jjtThis.setPassing(passingValues);
 		jjtThis.setColumns(columns);
 		jjtThis.setName(aliasID);
 		return jjtThis;
 	}
}

/*
name=object table column
description=object table column.
example={code:sql}y integer 'teiid_row_number'{code}
*/
ObjectColumnImpl objectColumn(ParseInfo info) #ObjectColumnImpl :
{
	String name = null;
	ParsedDataType datatype = null;
	String path = null;
	BaseExpression defaultExpr = null;
}
{
	name = id(null)
    datatype = parseDataType()
	path = stringVal()    
    [
   	  <DEFAULT_KEYWORD> defaultExpr = expression(info)
	]
	{
	  jjtThis.setName(name);
	  jjtThis.setType(datatype.getType());
	  jjtThis.setPath(path);
	  jjtThis.setDefaultExpression(defaultExpr);
	  return jjtThis;
	}
}


/*
name=xml table
description=Returns table results by processing an XQueryImpl.
example={code:sql}XMLTABLE('/a/b' PASSING doc COLUMNS col XML PATH '.') AS X{code}
*/
XMLTableImpl xmlTable(ParseInfo info) #XMLTableImpl :
{
	String xquery = null;
	XMLNamespacesImpl xmlNamespaces = null;
	DerivedColumnImpl passing = null;
	ArrayList<DerivedColumnImpl> passingValues = new ArrayList<DerivedColumnImpl>();
	XMLColumnImpl column = null;
	ArrayList<XMLColumnImpl> columns = new ArrayList<XMLColumnImpl>();
	String aliasID = null;
}
{
 	<XMLTABLE> <LPAREN> 
 	[ xmlNamespaces = xmlNamespaces(info) <COMMA> ]
 	xquery = stringVal()
 	[ 
 	  <PASSING>
 	  passing = derivedColumn(info)
 	  {
 	  	passingValues.add(passing);
 	  	passing.setPropagateName(false);
 	  }
 	  (<COMMA>
 	    passing = derivedColumn(info)
 	    {
 	  	  passingValues.add(passing);
 	  	  passing.setPropagateName(false);
 	    }
 	  )*
 	]
 	[
 	  <COLUMNS>
 	  column = xmlColumn(info)
 	  {
 	    columns.add(column);
 	  }
 	  (<COMMA>
 	    column = xmlColumn(info)
 	    {
 	      columns.add(column); 	    
 	    }
 	  )*
 	]
 	<RPAREN>
 	[<AS>] aliasID=id(Boolean.FALSE)
 	{
 		jjtThis.setXquery(xquery);
 		jjtThis.setNamespaces(xmlNamespaces);
 		jjtThis.setPassing(passingValues);
 		jjtThis.setColumns(columns);
 		jjtThis.setName(aliasID);
 		return jjtThis;
 	}
}

/*
name=xml table column
description=XML table column.
example={code:sql}y FOR ORDINALITY{code}
*/
XMLColumnImpl xmlColumn(ParseInfo info) #XMLColumnImpl :
{
	String name = null;
	ParsedDataType datatype = null;
	String path = null;
	BaseExpression defaultExpr = null;
}
{
	name = id(null)
	{
	   jjtThis.setName(name);
	}

	((
	  <FOR> <ORDINALITY> 
	  {
	    jjtThis.setOrdinal(true);
	    return jjtThis;
	  }	
	) | (
      datatype = parseDataType()
      [
	    <DEFAULT_KEYWORD> defaultExpr = expression(info)
	  ]
      [ 
	    <PATH> path = stringVal()
	  ]
	  {
	    jjtThis.setType(datatype.getType());
	    jjtThis.setPath(path);
	    jjtThis.setDefaultExpression(defaultExpr);
	    return jjtThis;
	  }
	))
}

/*
name=unsigned integer
description=An unsigned interger value.
example={code:sql}12345{code}
*/
int intVal() :
{
	Token t;
}
{
	t = <UNSIGNEDINTEGER>
	{
		try { 
			return Integer.valueOf(t.image); 				
		} catch(NumberFormatException e1) { 
			throw new ParseException(Messages.getString(Messages.TeiidParser.Integer_parse, t.image));
		}
	}
}

/*
name=table subquery
description=A table defined by a subquery.
example={code:sql}(SELECT * FROM tbl) AS x{code}
*/
SubqueryFromClauseImpl subqueryFromClauseImpl(ParseInfo info) #SubqueryFromClauseImpl :
{
    String aliasID = null;
	CommandImpl command = null;
	Token lparen = null;
	boolean table = false;
}
{	
	[
		(<TABLE>|<LATERAL>) { table = true; }
	]
	lparen = <LPAREN> 
	( command = queryExpression(info) |
      command = storedProcedure(info, 1) )
	<RPAREN>
	[<AS>]
	aliasID = id(Boolean.FALSE)
	
	{
	    jjtThis.setName(aliasID);
	    jjtThis.setCommand(command);
        setFromClauseOptions(lparen, jjtThis);
        jjtThis.setTable(table);
        return jjtThis;
    }	
}	
		
/*
name=table name
description=A table named in the FROM clause.
example={code:sql}tbl AS x{code}
*/
UnaryFromClauseImpl unaryFromClauseImpl(ParseInfo info) #UnaryFromClauseImpl :
{
	GroupSymbolImpl group = null;
	String groupID = null;
	Token groupToken = null;
    String aliasID = null;
}
{	
	(groupID=id(null) {groupToken = getToken(0);} [[<AS>] aliasID=id(Boolean.FALSE)])
	{
    	if(aliasID != null) {		
            group = groupSymbol(aliasID, groupID);
        } else {
			group = groupSymbol(groupID);
        }
        jjtThis.setGroup(group);
        setFromClauseOptions(groupToken, jjtThis);
		return jjtThis;
    }	
}		

/*
name=where clause
description=Specifies a search condition
example={code:sql}WHERE x = 'a'{code}
*/
CriteriaImpl where(ParseInfo info) :
{
    CriteriaImpl criteria = null;
}
{
    <WHERE>
	criteria = criteria(info)
	
	{
		return criteria;
	}
}

/*
name=condition
description=A boolean expression.
*/
CriteriaImpl criteria(ParseInfo info) #CriteriaImpl :
{
}
{	
	jjtThis = compoundCritOr(info)

	{
		return jjtThis;
	}
}

/*
name=boolean value expression
description=An optionally ORed boolean expression.
*/
CriteriaImpl compoundCritOr(ParseInfo info) :
{
    ArrayList logicList = null;
    CriteriaImpl logicPart = null;
    CriteriaImpl logicPart1 = null;
}
{
	logicPart=compoundCritAnd(info) 
	(<OR> logicPart1=compoundCritAnd(info) {
        if (logicList == null) {
          logicList = new ArrayList(2);
          logicList.add(logicPart);
        }

        logicList.add(logicPart1);
	  }
	)*

	{
		if(logicList == null) {
			return logicPart;
		} else {
         	CompoundCriteriaImpl cc = createASTNode(ASTNodes.COMPOUND_CRITERIA);
         	cc.setOperator(CompoundCriteriaImpl.OR);
         	cc.setCriteria(logicList);
         	return cc;
		}
	}
}

/*
name=boolean term
description=An optional ANDed boolean factor.
*/
CriteriaImpl compoundCritAnd(ParseInfo info) #CompoundCriteriaImpl :
{
    ArrayList logicList = null;
    CriteriaImpl logicPart = null;
    CriteriaImpl logicPart1 = null;
}
{
	logicPart=notCrit(info) 		
	(<AND> logicPart1=notCrit(info) {
        if (logicList == null) {
          logicList = new ArrayList(2);
          logicList.add(logicPart);
        }

        logicList.add(logicPart1);
      }
    )*

	{
   		if(logicList == null) {
			return logicPart;
		} else {
		    jjtThis.setOperator(CompoundCriteriaImpl.AND);
		    jjtThis.setCriteria(logicList);
         	return jjtThis;
		}	
	}
}

/*
name=boolean factor
description=A boolean factor.
example={code:sql}NOT x = 'a'{code}
*/
CriteriaImpl notCrit(ParseInfo info) #NotCriteriaImpl :
{
    BaseExpression ex = null;
	boolean isNot = false;
}
{
	[<NOT> {isNot=true;}] 
	ex=booleanPrimary(info)

	{
	    CriteriaImpl crit = null;
	    if (ex instanceof CriteriaImpl) {
	      crit = (CriteriaImpl)ex;
	    } else {
	      crit = expressionCriteria(ex);
	    }
  		if(isNot) {
  		    jjtThis.setCriteria(crit);
  			return jjtThis;
		} else {
			return crit;
		}
	}
}

/*
name=boolean primary
description=A boolean predicate or simple expression.
example={code:sql}col LIKE 'a%'{code}
*/
BaseExpression booleanPrimary(ParseInfo info) :
{
    BaseExpression ex = null;
}
{
    (
	    (ex = commonValueExpression(info)
	     [(
			LOOKAHEAD(2) ex=betweenCrit(info, ex) |
			LOOKAHEAD(2) ex=matchCrit(info, ex) |
			LOOKAHEAD(2) ex=regexMatchCrit(info, ex) |
			ex=setCrit(info, ex) |
			ex=isNullCrit(info, ex) |
			LOOKAHEAD(operator() (<ANY>|<SOME>|<ALL>) subquery(info)) ex=subqueryCompareCriteria(info, ex) |
			ex=compareCrit(info, ex)
	     )]
	    )
	    |
		ex=existsCriteria(info)
    )
	{
		return ex;
	}
}

/*
name=comparison operator
description=A comparison operator.
example={code:sql}={code}
*/
Token operator() :
{
	Token operator = null;
}
{
	(operator=<EQ> |
    operator=<NE> |
    operator=<NE2> |
    operator=<LT> |
    operator=<LE> |
    operator=<GT> |
    operator=<GE>
    )
    {
    	return operator;
    }
}

/*
name=comparison predicate
description=A value comparison.
example={code:sql}= 'a'{code}
*/
CompareCriteriaImpl compareCrit(ParseInfo info, BaseExpression expression) #CompareCriteriaImpl :
{
    BaseExpression value = null;
    Token operator = null;
}
{
	operator=operator()
	value=commonValueExpression(info)

	{
		// Set left expression
		jjtThis.setLeftExpression(expression);

		jjtThis.setOperator(Operator.getOperator(getVersion(), operator.image));
		
		// Set value
		jjtThis.setRightExpression(value);

	    return jjtThis;
	}
}

/*
name=subquery
description=A subquery.
example={code:sql}(SELECT * FROM tbl){code}
*/
QueryCommandImpl subquery(ParseInfo info) :
{
    QueryCommandImpl subquery = null;
    StoredProcedureImpl proc = null;
}
{
	<LPAREN>
	( subquery = queryExpression(info) | 
	 (
		proc = storedProcedure(info, 1) //deprecated	  
	 )
	 {
	    MultipleElementSymbolImpl multipleElementSymbol = createASTNode(ASTNodes.MULTIPLE_ELEMENT_SYMBOL);

        SelectImpl select = createASTNode(ASTNodes.SELECT);
        select.setSymbols(Arrays.asList(multipleElementSymbol));

        SubqueryFromClauseImpl subqueryFromClauseImpl = createASTNode(ASTNodes.SUBQUERY_FROM_CLAUSE);
        subqueryFromClauseImpl.setName("x");
        subqueryFromClauseImpl.setCommand(proc);

        FromImpl from = createASTNode(ASTNodes.FROM);
        from.setClauses(Arrays.asList(subqueryFromClauseImpl));

        QueryImpl query = createASTNode(ASTNodes.QUERY);
        query.setSelect(select);
        query.setFrom(from);
        subquery = query;
	 }
	)
	<RPAREN>
	{
		return subquery;
	}
}

/*
name=quantified comparison predicate
description=A subquery comparison.
example={code:sql}= ANY (SELECT col FROM tbl){code}
*/
SubqueryCompareCriteriaImpl subqueryCompareCriteria(ParseInfo info, BaseExpression expression) #SubqueryCompareCriteriaImpl :
{
    QueryCommandImpl subquery = null;
    Token operator = null;
    Token quantifier = null;
    
}
{
	operator=operator()
	( quantifier=<ANY> |
	  quantifier=<SOME> |
	  quantifier=<ALL>
	)
	subquery = subquery(info)

	{
	    jjtThis.setLeftExpression(expression);
	    jjtThis.setCommand(subquery);
    
		// Set operator
		jjtThis.setOperator(Operator.getOperator(getVersion(), operator.image));

		// Set predicate quantifier
		if(quantifier.image.equalsIgnoreCase("any")) { //$NON-NLS-1$
			jjtThis.setPredicateQuantifier(PredicateQuantifier.ANY);
		} else if(quantifier.image.equalsIgnoreCase("some")) { //$NON-NLS-1$
			jjtThis.setPredicateQuantifier(PredicateQuantifier.SOME);
		} else if(quantifier.image.equalsIgnoreCase("all")) { //$NON-NLS-1$
			jjtThis.setPredicateQuantifier(PredicateQuantifier.ALL);
		} 

	    return jjtThis;
   	}
}

/*
name=match predicate
description=Matches based upon a pattern.
example={code:sql}LIKE 'a_'{code}
*/
MatchCriteriaImpl matchCrit(ParseInfo info, BaseExpression expression) #MatchCriteriaImpl :
{
    Character esc = null;
	BaseExpression value = null;
	boolean negated = false;
	boolean similar = false;
	Token t = null;
}
{
	[<NOT> {negated = true;}]
    (<LIKE>|(<SIMILAR> <TO> {similar = true;}))
    {t = getToken(1);}
	value=commonValueExpression(info)
    [   <ESCAPE> esc = charVal(info, "LIKE/SIMILAR TO ESCAPE") |
        (<LBRACE> <ESCAPE> esc = charVal(info, "LIKE/SIMILAR TO ESCAPE") <RBRACE>) 
    ]
	{
	    jjtThis.setLeftExpression(expression);
	    jjtThis.setRightExpression(value);
		jjtThis.setNegated(negated);
	    if(esc != null) {
			jjtThis.setEscapeChar(esc.charValue());
		} else if (!similar && value instanceof ConstantImpl) {
			if (t.image != null && t.image.startsWith("E'")) {
				jjtThis.setEscapeChar('\\');
			}
		}
		jjtThis.setMode(similar?MatchMode.SIMILAR:MatchMode.LIKE);
		return jjtThis;
   	}
}

/*
name=like regex predicate
description=A regular expression match.
example={code:sql}LIKE_REGEX 'a.*b'{code}
*/
MatchCriteriaImpl regexMatchCrit(ParseInfo info, BaseExpression expression) :
{
	BaseExpression value = null;
	boolean negated = false;
}
{
	[<NOT> {negated = true;}]
    <LIKE_REGEX>
	value=commonValueExpression(info)
	{
    	MatchCriteriaImpl matchcriteria = createASTNode(ASTNodes.MATCH_CRITERIA);
    	matchcriteria.setLeftExpression(expression);
    	matchcriteria.setRightExpression(value);
		matchcriteria.setNegated(negated);
		matchcriteria.setMode(MatchMode.REGEX);
		return matchcriteria;
   	}
}

/*
name=character
description=A single character.
example={code:sql}'a'{code}
*/
Character charVal(ParseInfo info, String type) :
{
	String escStr = null;
}
{
	escStr=stringVal()
	{
		if (escStr.length() != 1) {
			throw new ParseException(Messages.getString(Messages.TeiidParser.char_val));
		}
		return Character.valueOf(escStr.charAt(0));
	}
}

/*
name=between predicate
description=A comparison between two values.
example={code:sql}BETWEEN 1 AND 5{code}
*/
BetweenCriteriaImpl betweenCrit(ParseInfo info, BaseExpression expression) #BetweenCriteriaImpl :
{
	BaseExpression lowerExpression = null, upperExpression = null;
	boolean negated = false;
}
{
	[<NOT> {negated=true;}]
	<BETWEEN>
	lowerExpression = commonValueExpression(info)
	<AND>
	upperExpression = commonValueExpression(info)
	
	{
		jjtThis.setExpression(expression);
		jjtThis.setLowerExpression(lowerExpression);
		jjtThis.setUpperExpression(upperExpression);
		jjtThis.setNegated(negated);
		return jjtThis;
	}
}

/*
name=is null predicate
description=A null test.
example={code:sql}IS NOT NULL{code}
*/
IsNullCriteriaImpl isNullCrit(ParseInfo info, BaseExpression expression) #IsNullCriteriaImpl :
{
	boolean negated = false;
}
{
	<IS>
	[<NOT> {negated = true;}]
	<NULL>

	{
	   jjtThis.setExpression(expression);
	   jjtThis.setNegated(negated);
	   return jjtThis;
	}
}

/*
name=in predicate
description=A comparison with multiple values.
example={code:sql}IN (1, 5){code}
*/
AbstractSetCriteria setCrit(ParseInfo info, BaseExpression expression) :
{
	BaseExpression value = null;
	List setList = new ArrayList();
	QueryCommandImpl command = null;
	SubqueryHint hint = null;
	boolean negated = false;
	AbstractSetCriteria criteria = null;
}
{
	[<NOT> {negated = true;}]
	<IN>
	(
		LOOKAHEAD(subquery(info)) { hint = getSubqueryHint(getToken(1)); } (command = subquery(info)) |
		(
			<LPAREN>
			value = commonValueExpression(info)
			{
				setList.add(value);
			}
			( <COMMA>
				value = commonValueExpression(info)
				{
					setList.add(value);
				}
			)*
			<RPAREN>
		)
	)
	{
	    if (command != null) {
			SubquerySetCriteriaImpl ssc = subquerySetCriteriaImpl(expression, command);
			ssc.setSubqueryHint(hint);
			criteria = ssc;
		} else {
		    criteria = setCriteria(expression, setList);
		}
	    criteria.setNegated(negated);
	    return criteria;
   	}
}

SubquerySetCriteriaImpl subquerySetCriteriaImpl(BaseExpression expression, QueryCommandImpl command) #SubquerySetCriteriaImpl :
{
}
{
    {
        jjtThis.setExpression(expression);
        jjtThis.setCommand(command);
        return jjtThis;
    }
}

SetCriteriaImpl setCriteria(BaseExpression expression, List<BaseExpression> values) #SetCriteriaImpl :
{
}
{
    {
        jjtThis.setExpression(expression);
        jjtThis.setValues(values);
        return jjtThis;
    }
}

/*
name=exists predicate
description=A test if rows exist.
example={code:sql}EXISTS (SELECT col FROM tbl){code}
*/
ExistsCriteriaImpl existsCriteria(ParseInfo info) #ExistsCriteriaImpl :
{
    QueryCommandImpl subquery = null;
    SubqueryHint hint = null;
}
{
	<EXISTS> { hint = getSubqueryHint(getToken(1)); } 
	subquery = subquery(info)

	{
	    jjtThis.setCommand(subquery);
		jjtThis.setSubqueryHint(hint);
	    return jjtThis;
   	}
}

/*
name=group by clause
description=Defines the grouping columns
example={code:sql}GROUP BY col1, col2{code}
*/
GroupByImpl groupBy(ParseInfo info) #GroupByImpl :
{
	List<BaseExpression> expressions = null;
	boolean rollup = false;
}
{
	<GROUP> <BY>
    (
      <ROLLUP><LPAREN>
      expressions = expressionList(info)
      <RPAREN>
      {
        requiresVersionAtLeast(Version.TEIID_8_5);
        rollup = true;
      }
      |
      expressions = expressionList(info)
    )

	{
	    jjtThis.setSymbols(expressions);
	    jjtThis.setRollup(rollup);
		return jjtThis;
	}
}

/*
name=having clause
description=Search condition applied after grouping.
example={code:sql}HAVING max(col1) = 5{code}
*/
CriteriaImpl having(ParseInfo info) :
{
    CriteriaImpl criteria = null;
}
{
    <HAVING>
	criteria = criteria(info)
	{
		return criteria;
	}
}

/*
name=order by clause
description=Specifices row ordering.
example={code:sql}ORDER BY x, y DESC{code}
*/
OrderByImpl orderby(ParseInfo info) #OrderByImpl :
{
    OrderByItemImpl item = null;
}
{
	<ORDER> <BY>
	item = sortSpecification(info)
	{
    	jjtThis.getOrderByItems().add(item);
	}
	(<COMMA>
		item = sortSpecification(info)
		{
    		jjtThis.getOrderByItems().add(item);
		}
	)*
	{
	    return jjtThis;
	}
}

/*
name=sort specification
description=Defines how to sort on a particular expression
example={code:sql}col1 NULLS FIRST{code}
*/
OrderByItemImpl sortSpecification(ParseInfo info) #OrderByItemImpl :
{
    BaseExpression ex = null;
    boolean ascending = true;
    NullOrdering nullOrdering = null;    
}
{
	ex=sortKey(info) 
	[<ASC> | <DESC> {ascending=false;}]
	[<NULLS> (<FIRST> {nullOrdering=NullOrdering.FIRST;} | <LAST> {nullOrdering=NullOrdering.LAST;})] 
	{
	    jjtThis.setSymbol(ex);
	    jjtThis.setAscending(ascending);
    	if (nullOrdering != null) {
    		jjtThis.setNullOrdering(nullOrdering);
    	}
    	return jjtThis;
	}
}

/*
name=sort key
description=A sort expression.
example={code:sql}col1{code}
*/
BaseExpression sortKey(ParseInfo info) :
{
    BaseExpression ex = null;
}
{
    ex=expression(info)
    {
        //legacy support check for positional constants
        if (ex instanceof ConstantImpl) {
        	boolean valid = false;
            ConstantImpl c = (ConstantImpl)ex;
            if (c.getValue() instanceof Integer) {
                Integer val = (Integer)c.getValue();
                valid = val.intValue() > 0;
            }      
            if (!valid) {
            	throw new ParseException(Messages.getString(Messages.TeiidParser.non_position_constant, ex));
            }
        } 
        return ex;
    }
}

/*
name=integer parameter
description=A literal integer or parameter reference to an integer.
example={code:sql}?{code}
*/
BaseExpression intParam(ParseInfo info) :
{
   BaseExpression ex = null;
   Integer val = null;
}
{
   val = intVal()
   {
     return constant(val, DefaultDataTypeManager.DefaultDataTypes.INTEGER);
   }
   |
   ex = unsignedValueExpressionPrimary(info)
   {     return ex;
   }
}

/*
name=limit clause
description=Limits and/or offsets the resultant rows.
example={code:sql}LIMIT 2{code}
*/
LimitImpl limit(ParseInfo info) #LimitImpl :
{
	BaseExpression limit = null;
	BaseExpression offset = null;
	Token t = null;
}
{
    {t = getToken(1);}
    ((<LIMIT> offset = intParam(info)
	[<COMMA> limit = intParam(info)])
	{
	  if (limit == null) {
	    limit = offset;
	    offset = null;
	  }
	}
	|
	(<OFFSET> offset = intParam(info) (<ROW>|<ROWS>) 
    [limit = fetchLimitImpl(info)])
    |
    (limit = fetchLimitImpl(info)))
	{
	    jjtThis.setOffset(offset);
	    jjtThis.setRowLimit(limit);
		jjtThis.setStrict(!isNonStrictHint(t));
		return jjtThis;
	}
}

/*
name=fetch clause
description=ANSI limit.
example={code:sql}FETCH FIRST 1 ROWS ONLY{code}
*/
BaseExpression fetchLimitImpl(ParseInfo info) :
{
    BaseExpression limit = null;
}
{
    <FETCH> (<FIRST> | <NEXT>) [limit = intParam(info)] (<ROW>|<ROWS>) <ONLY>
    {
      if (limit == null) {
        return constant(1, DefaultDataTypeManager.DefaultDataTypes.INTEGER); 
      }
      return limit;
    }
}

/*
name=option clause
description=Specifies query options.
example={code:sql}OPTION MAKEDEP tbl{code}
*/
OptionImpl option(ParseInfo info) #OptionImpl :
{
	String id = null;
	Token nocache = null;
}
{
	<OPTION>
	(
		<MAKEDEP>		
		id=id(null)
		{
            jjtThis.addDependentGroup(id);
		}
		(<COMMA>
			id=id(null)
			{
                jjtThis.addDependentGroup(id);
	        }
		)* |
		<MAKENOTDEP>		
		id=id(null)
		{
            jjtThis.addNotDependentGroup(id);
		}
		(<COMMA>
			id=id(null)
			{
                jjtThis.addNotDependentGroup(id);
	        }
		)* |
		
		nocache	= <NOCACHE>		
		[id=id(null)
		{
            jjtThis.addNoCacheGroup(id);
		}
		(<COMMA>
			id=id(null)
			{
                jjtThis.addNoCacheGroup(id);
	        }
		)*]
	)*

	{
		jjtThis.setNoCache( (nocache != null) );
		return jjtThis;
	}
}

/*
name=expression
description=A value.
example={code:sql}col1{code}
*/
BaseExpression expression(ParseInfo info) :
{
  BaseExpression expression = null;
}
{
    expression = criteria(info)
	{
		if (expression instanceof ExpressionCriteriaImpl) {
			return ((ExpressionCriteriaImpl)expression).getExpression();
		}
		return expression;
	}
}

/*
name=common value expression
description=Establishes the precedence of concat.
example={code:sql}'a' || 'b'{code}
*/
BaseExpression commonValueExpression(ParseInfo info) :
{
	BaseExpression leftExpression = null;
	BaseExpression rightExpression = null;
}
{
	(	leftExpression=plusExpression(info)
		(
			<CONCAT_OP>
			rightExpression=plusExpression(info)
			{
			    FunctionImpl function = createASTNode(ASTNodes.FUNCTION);
			    function.setName("||"); //$NON-NLS-1$
			    function.setArgs(new BaseExpression[] {leftExpression, rightExpression});
			    leftExpression = function;
				rightExpression = null;
			}
		)*
	)

	{
		return leftExpression;
	}
}

/*
name=numeric value expression
example={code:sql}1 + 2{code}
*/
BaseExpression plusExpression(ParseInfo info) :
{
	BaseExpression leftExpression = null;
	BaseExpression rightExpression = null;
	String operator = null;
}
{
	(	leftExpression=timesExpression(info)
		(
			operator=plusMinus()
			rightExpression=timesExpression(info)
			{
			    FunctionImpl function = createASTNode(ASTNodes.FUNCTION);
			    function.setName(operator);
			    function.setArgs(new BaseExpression[] { leftExpression, rightExpression });
			    leftExpression = function;
				rightExpression = null;
				operator = null;
			}
		)*
	)

	{
		return leftExpression;
	}
}

/*
name=plus or minus
description=The + or - operator.
example={code:sql}+{code}
*/
String plusMinus() :
{
}
{
	(<PLUS> | <MINUS>)
	{
		return getToken(0).image;
	}
}

/*
name=term
description=A numeric term
example={code:sql}1 * 2{code}
*/
BaseExpression timesExpression(ParseInfo info) :
{
	BaseExpression leftExpression = null;
	BaseExpression rightExpression = null;
	String operator = null;
}
{
	(	leftExpression=valueExpressionPrimary(info)
		(
			operator=timesOperator()
			rightExpression=valueExpressionPrimary(info) 
			{
			    FunctionImpl function = createASTNode(ASTNodes.FUNCTION);
			    function.setName(operator);
			    function.setArgs(new BaseExpression[] {leftExpression, rightExpression});
			    leftExpression = function;
				rightExpression = null;
				operator = null;
			}
		)*
	)

	{
		return leftExpression;
	}
}

/*
name=star or slash
description=The * or / operator.
example={code:sql}/{code}
*/
String timesOperator() :
{
	Token operator = null;
}
{
	(	operator = <STAR> |
		operator = <SLASH>
	)

	{
		return operator.image;
	}
}

/*
name=value expression primary
description=A simple value expression.
example={code:sql}+col1{code}
*/
BaseExpression valueExpressionPrimary(ParseInfo info) :
{
	String strVal = null;
	BaseExpression ex = null;
	BaseExpression indexExpr = null;
	List<BaseExpression> indexExprs = null;
}
{
	// Literal
	(ex=nonNumericLiteral()
	| [strVal = plusMinus()] 
	  (ex = unsignedNumericLiteral(strVal)
	   |
        (ex = unsignedValueExpressionPrimary(info)
          //array element reference expressions
          (<LSBRACE> indexExpr = plusExpression(info) <RSBRACE> {
              indexExprs = arrayExpressions(indexExprs, indexExpr);
            }
          )*
          {
            if (indexExprs != null) {
              for (BaseExpression expr : indexExprs) {
                FunctionImpl function = createASTNode(ASTNodes.FUNCTION);
                function.setName("array_get"); //$NON-NLS-1$
                function.setArgs(new BaseExpression[] {ex, expr});
                ex = function;
              }
            }
          }
        )
        {
          if (strVal != null && strVal.charAt(0) == '-') {
            FunctionImpl function = createASTNode(ASTNodes.FUNCTION);
            function.setName("*"); //$NON-NLS-1$
            function.setArgs(new BaseExpression[] { constant(-1), ex });
            ex = function;
          }
        }
	  )
    )
	{
	  return ex;
	}
}

/*
name=parameter reference
description=A parameter reference to be bound later.
example={code:sql}?{code}
*/
ReferenceImpl parameterReference(ParseInfo info) :
{
    Integer index = null;
}
{
    <QMARK> {return reference(info.incrementReferenceCount());}
    |
    (<DOLLAR> index = intVal() {return reference(index -1); })
}

BaseExpression unescapedFunction(ParseInfo info) :
{
    BaseExpression expression = null;
    BaseExpression condition = null;
    
}
{
    // Aggregate function
    (LOOKAHEAD(2) ((expression=textAgg(info) | expression=aggregateSymbol(info) | expression=orderedAgg(info)) [condition = filterClause(info)] [expression = windowSpecification(expression, info)])
    |
    LOOKAHEAD(2) (expression=analyticBaseAggregateSymbol(info) [condition = filterClause(info)] expression = windowSpecification(expression, info))
    |
    // Function
    LOOKAHEAD(2) (expression=function(info) [expression = windowSpecification(expression, info)]))
    {
        if (condition != null) {
            if (expression instanceof BaseWindowFunction) {
                ((BaseWindowFunction)expression).getFunction().setCondition(condition);
            } else {
                ((BaseAggregateSymbol)expression).setCondition(condition);
            }
        }
        return expression;
    }
}

/*
name=nested expression
description=An expression nested in parens
example={code:sql}(1){code}
*/
BaseExpression nestedExpression(ParseInfo info) :
{
    BaseExpression expression = null;
    BaseExpression arrayExpression = null;
    List<BaseExpression> arrayExpressions = null;
}
{
    ( <LPAREN> 
        [expression = expression(info)
        (LOOKAHEAD(2) <COMMA>arrayExpression = expression(info) {
          requiresVersionAtLeast(Version.TEIID_8_5);
          if (expression != null) {
             arrayExpressions = arrayExpressions(arrayExpressions, expression);
             expression = null;
          } 
          arrayExpressions = arrayExpressions(arrayExpressions, arrayExpression);})*]
        [<COMMA>
          {
            requiresVersionAtLeast(Version.TEIID_8_5);
            arrayExpressions = arrayExpressions(arrayExpressions, expression);
          } ]
      <RPAREN>
    )
    {
        if (arrayExpressions != null) {
          ArraySymbolImpl array = array();
          array.setExpressions(arrayExpressions);
          expression = array;
        } else if (expression == null) {
          ArraySymbolImpl array = array();
          array.setExpressions(new ArrayList<BaseExpression>(0));
          expression = array;
        }
        return expression;
    }
}    

/*
name=unsigned value expression primary
description=An unsigned simple value expression.
example={code:sql}col1{code}
*/
BaseExpression unsignedValueExpressionPrimary(ParseInfo info) :
{
	BaseExpression expression = null;
	Token symbol = null;
	QueryCommandImpl subquery = null;
}
{
    (
		// ReferenceImpl
		expression = parameterReference(info)
		|
		// Escaped function
		(	<ESCAPEDFUNCTION>
			expression=function(info)
			<RBRACE>
		)
        |
		LOOKAHEAD(2) expression = unescapedFunction(info)
		|
		// ElementSymbolImpl
		((symbol=<ID> {
				String symbolImage = symbol.image;
				if(isStringLiteral(symbolImage, info)) {
				    return constant(normalizeStringLiteral(symbolImage));
				}  
			} | symbol=nonReserved()) {expression = elementSymbol(normalizeId(symbol.image));}
		)
		|
		LOOKAHEAD(subquery(info)) subquery = subquery(info) {expression = scalarSubquery(subquery);}
		|
		expression = nestedExpression(info)
		|
		// Searched CASE expressions
		LOOKAHEAD(2) expression = searchedCaseExpression(info)
		|
		// Non-searched CASE expressions
		expression = caseExpression(info)
	)

	{
		return expression;
	}
}

ReferenceImpl reference(int referenceIndex) #ReferenceImpl :
{
}
{
    {
        jjtThis.setIndex(referenceIndex);
        jjtThis.setPositional(true);
        return jjtThis;
    }
}

/*
name=window specification
description=The window specification for an analytical or windowed aggregate function.
example={code:sql}OVER (PARTION BY col1){code}
*/
BaseExpression windowSpecification(BaseExpression agg, ParseInfo info) :
{
	List<BaseExpression> partitionList = null;
	OrderByImpl orderBy = null;
}
{
	<OVER>
	{
	  if (!(agg instanceof BaseAggregateSymbol)) {

	  	if (versionLessThan(Version.TEIID_8_6)) {
	   		throw new ParseException(Messages.getString(Messages.TeiidParser.invalid_window, agg));
    	}

	    if (!(agg instanceof FunctionImpl)) {
          throw new ParseException(Messages.getString(Messages.TeiidParser.invalid_window, agg));
        }
        FunctionImpl f = (FunctionImpl)agg;
        BaseAggregateSymbol aggSymbol = createASTNode(ASTNodes.AGGREGATE_SYMBOL);
        aggSymbol.setName(f.getName());
        aggSymbol.setAggregateFunction(f.getName());
        aggSymbol.setDistinct(false);
        aggSymbol.setArgs(f.getArgs());
        agg = aggSymbol;
      }
    }
    <LPAREN> 
    [<PARTITION> <BY> partitionList = expressionList(info)]
    [orderBy = orderby(info)]
    <RPAREN>
    {
    	BaseWindowFunction result = windowFunction();
    	WindowSpecificationImpl ws = newWindowSpecificationImpl();
    	result.setFunction((BaseAggregateSymbol)agg);
    	ws.setPartition(partitionList);
    	ws.setOrderBy(orderBy);
    	result.setWindowSpecification(ws);
    	return result;
    }
}

/*
name=case expression
description=If/then/else chain using a common search predicand.
example={code:sql}CASE col1 WHEN 'a' THEN 1 ELSE 2{code}
*/
CaseExpressionImpl caseExpression(ParseInfo info) #CaseExpressionImpl :
{
	BaseExpression expression = null, whenExpression = null, thenExpression = null, elseExpression = null;
	ArrayList whenExpressions = new ArrayList(2);
	ArrayList thenExpressions = new ArrayList(2);
}
{
	<CASE>
	expression = expression(info)
	(
		<WHEN>
		whenExpression = expression(info)
		<THEN>
		thenExpression = expression(info)
		{
			whenExpressions.add(whenExpression);
			thenExpressions.add(thenExpression);
		}
	)+
	[<ELSE> elseExpression = expression(info)]
	<END>
	{
	    jjtThis.setExpression(expression);
	    jjtThis.setWhen(whenExpressions, thenExpressions);
		jjtThis.setElseExpression(elseExpression);
		return jjtThis;
	}
}

/*
name=searched case expression
description=If/then/else chain using multiple search conditions.
example={code:sql}CASE WHEN x = 'a' THEN 1 WHEN y = 'b' THEN 2{code}
*/
SearchedCaseExpressionImpl searchedCaseExpression(ParseInfo info) #SearchedCaseExpressionImpl :
{
	BaseExpression thenExpression = null, elseExpression = null;
	CriteriaImpl whenCriteria = null;
	List<CriteriaImpl> whenCriteriaList = new ArrayList<CriteriaImpl>(2);
    List<BaseExpression> thenExpressions = new ArrayList<BaseExpression>(2);
}
{
	<CASE>
	(
		<WHEN>
		whenCriteria = criteria(info)
		<THEN>
		thenExpression = expression(info)
		{
			whenCriteriaList.add(whenCriteria);
			thenExpressions.add(thenExpression);
		}
	)+
	
	[<ELSE> elseExpression = expression(info)]
	<END>
	{
	    jjtThis.setWhen(whenCriteriaList, thenExpressions);
		jjtThis.setElseExpression(elseExpression);
		return jjtThis;
	}
}

/*
name=function
description=Calls a scalar function.
example={code:sql}func('1', col1){code}
*/
BaseExpression function(ParseInfo info) #FunctionImpl :
{
	String funcName = null;
    
	BaseExpression expression = null;
	ArrayList args = new ArrayList(2);
	ArrayList otherArgs = null;
	Token funcToken = null;
	Boolean distinct = null;
	OrderByImpl orderBy = null;
	BaseExpression condition = null;
	String literal = null;
	ParsedDataType type = null;
}
{
	((	funcToken = <CONVERT>
		<LPAREN>
		expression = expression(info)
		{
			args.add(expression);
		}
		<COMMA>
		type = parseDataType()	
		{
			args.add(constant(type.getType()));
		}
		<RPAREN> 
	)
	|
	(			
		funcToken = <CAST>
		<LPAREN>
		expression = expression(info)
		{
			args.add(expression);
		} 
		<AS>
		type = parseDataType()
		{
			args.add(constant(type.getType()));
		}
		<RPAREN>				
	)
	|
	LOOKAHEAD(2) (
	   funcToken = <SUBSTRING>
	   <LPAREN>
	   expression = expression(info)
	   {
	      args.add(expression);
	   }
	   ((<FROM> expression = expression(info)
	   {
	      args.add(expression);
	   }
  	   [<FOR> expression = expression(info)
	    {
	      args.add(expression);
	    }
	   ])|(<COMMA> otherArgs = expressionList(info)) {args.addAll(otherArgs);})
	   <RPAREN>
	)
	|
	LOOKAHEAD(2) (
	   funcToken = <EXTRACT>
	   <LPAREN>
	   (funcToken = <YEAR> | 
	    funcToken = <MONTH> |
	    funcToken = <DAY> |
	    funcToken = <HOUR> |
	    funcToken = <MINUTE> |
	    funcToken = <SECOND>)
	   <FROM> expression = expression(info)
	   {
	   	  if (funcToken.image.equalsIgnoreCase("DAY")) {
	         funcName = "DAYOFMONTH";
	      }  	      
	      args.add(expression);
	   }
	   <RPAREN>
	)
	|
	LOOKAHEAD(2) (
	   funcToken = <TRIM>
	   <LPAREN>
	   { funcName = funcToken.image; funcToken = null; expression = null;}
	   [
	    LOOKAHEAD(2) (((funcToken = <LEADING>|
	      funcToken = <TRAILING>|
	      funcToken = <BOTH>)
	    [expression = expression(info)])
	    |
	    expression = expression(info))
		<FROM>
	   ]
  	   {
	      if (funcToken == null) {
	      	  args.add(constant("BOTH"));
	      } else {
	          args.add(constant(funcToken.image));
	      }
	      if (expression == null) {
	          args.add(constant(" "));
	      } else {
	          if (expression instanceof ConstantImpl) {
	              Object value = ((ConstantImpl)expression).getValue();
	              if (value instanceof String && ((String)value).length() != 1) {
				      throw new ParseException(Messages.getString(Messages.TeiidParser.char_val));
	              }
	          }
	          args.add(expression);
	      }
	   }
	   expression = expression(info)
	   {
	      args.add(expression);
	   }
	   <RPAREN>
	)
	|
	LOOKAHEAD(2) (	
		(funcToken = <TO_CHARS> | funcToken = <TO_BYTES>)
		<LPAREN>
		expression = expression(info) 
		{		
			args.add(expression);
		}
		<COMMA>
		literal = stringVal()
		{
			args.add(constant(literal));
		}
		[<COMMA> expression = expression(info)
		 {
		   requiresVersionAtLeast(Version.TEIID_8_6);
		   args.add(expression);
		 }
		]
		<RPAREN>				
	)
	|
	LOOKAHEAD(2) (	
		(funcToken = <TIMESTAMPADD> | funcToken = <TIMESTAMPDIFF>)
		<LPAREN>
		expression = intervalType() 
		{		
			args.add(expression);
		}
		<COMMA>
		expression = expression(info)
		{
			args.add(expression);
		} 
		<COMMA>
		expression = expression(info)
		{
			args.add(expression);
		} 
		<RPAREN>				
	)
	|
	LOOKAHEAD(2) expression = queryString(info)
	  {
		return expression;
	  }		
	|
	(
		(funcToken = <LEFT> | funcToken = <RIGHT> | funcToken = <CHAR> | funcToken = <USER> 
		                    | funcToken = <YEAR> | funcToken = <MONTH> | funcToken = <HOUR>
		                    | funcToken = <MINUTE> | funcToken = <SECOND> | funcToken = <XMLCONCAT>
		                    | funcToken = <XMLCOMMENT>)
        <LPAREN>
		[args = expressionList(info)]
		<RPAREN>
	)		
	|
	LOOKAHEAD(<TRANSLATE>|<INSERT> <LPAREN>) (
		(funcToken = <TRANSLATE> | funcToken = <INSERT>)
		<LPAREN>
		[args = expressionList(info)]
		<RPAREN>
	)  
	| expression = xmlParse(info)
	  {
	  	return expression;
	  }
	| expression = xmlElement(info)
	  {
	  	return expression;
	  }
	| ( funcToken = <XMLPI>
		<LPAREN>
		(
		 [LOOKAHEAD(1) <NAME>] literal = id(null)
		)
		{
			args.add(constant(literal));	
		}
		[
			<COMMA> expression = expression(info)
			{
				args.add(expression);	
			}	
		]
		<RPAREN>
	)
	|	expression = xmlForest(info)
		{
			return expression;
		}
	|	LOOKAHEAD(<JSONOBJECT>) expression = jsonObject(info)
		{
			return expression;
		}
	|	expression = xmlSerialize(info)
		{
			return expression;
		}
	|	expression = xmlQueryImpl(info)
		{
			return expression;
		}
	|   
	(	funcName = id(null)
		<LPAREN>
		[<ALL> { distinct = false; } | <DISTINCT> {distinct = true;} ]
		[ args = expressionList(info) ]
		[ orderBy = orderby(info) ]
		<RPAREN>
		[condition = filterClause(info)]
	))		
	{
		if(funcName == null) { 
			funcName = funcToken.image;
		}
		if (distinct != null || orderBy != null || condition != null || "string_agg".equalsIgnoreCase(funcName)) {
		    BaseAggregateSymbol as = newBaseAggregateSymbol(funcName, distinct!=null?distinct:false, (BaseExpression[])args.toArray(new BaseExpression[args.size()]));
		    as.setOrderBy(orderBy);
			as.setCondition(condition);
			return as;
        }
        jjtThis.setName(funcName);
        jjtThis.setArgs((BaseExpression[])args.toArray(new BaseExpression[args.size()]));
        return jjtThis;
	}
}

/*
name=xml parse
description=Parses the given value as XML.
example={code:sql}XMLPARSE(DOCUMENT doc WELLFORMED){code}
*/
XMLParseImpl xmlParse(ParseInfo info) #XMLParseImpl :
{
	BaseExpression expr = null;
	boolean doc = false;
	boolean wellformed = false;
}
{
	<XMLPARSE><LPAREN>
	(<DOCUMENT> {doc = true;}| <CONTENT> {doc = false;})
	expr = expression(info)
	[<WELLFORMED>
	 {
	   wellformed = true;
	 }
	]
	<RPAREN>
	{
		jjtThis.setDocument(doc);
		jjtThis.setExpression(expr);
		jjtThis.setWellFormed(wellformed);
		return jjtThis;
	}
}

/*
name=querystring function
description=Produces a URL query string from the given arguments.
example={code:sql}QUERYSTRING(col1 AS opt, col2 AS val){code}
*/
QueryStringImpl queryString(ParseInfo info) #QueryStringImpl :
{
	BaseExpression path = null;
	DerivedColumnImpl arg = null;
	ArrayList<DerivedColumnImpl> args = new ArrayList<DerivedColumnImpl>(2);
}
{
 	<QUERYSTRING> <LPAREN>
 	path = expression(info)
	(<COMMA> arg=derivedColumn(info)
	 {
		args.add(arg);
		arg = null;
	 }
	)*
	<RPAREN>  		
	{
	    jjtThis.setPath(path);
	    jjtThis.setArgs(args);
		return jjtThis;
	}
}

/*
name=xml element
description=Creates an XML element.
example={code:sql}XMLELEMENT(NAME "root", child){code}
*/
XMLElementImpl xmlElement(ParseInfo info) #XMLElementImpl :
{
	String name = null;
	ArrayList content = new ArrayList(2);
	XMLNamespacesImpl xmlNamespaces = null;
	XMLAttributesImpl xmlAttributes = null;
	BaseExpression expression = null;
}
{
	<XMLELEMENT> <LPAREN>
	(
	 [LOOKAHEAD(1) <NAME>] name = id(null)
	)
	[
		LOOKAHEAD(2) <COMMA> xmlNamespaces = xmlNamespaces(info)
	]
	[
		LOOKAHEAD(2) <COMMA> xmlAttributes = xmlAttributes(info)
	]
	(<COMMA> expression=expression(info)
	{
		content.add(expression);
	}
	)*
	<RPAREN>
	{
	    jjtThis.setName(name);
	    jjtThis.setContent(content);
		jjtThis.setNamespaces(xmlNamespaces);
		jjtThis.setAttributes(xmlAttributes);
		return jjtThis;
	}
}

/*
name=xml attributes
description=Creates attributes for the containing element.
example={code:sql}XMLATTRIBUTES(col1 AS attr1, col2 AS attr2){code}
*/
XMLAttributesImpl xmlAttributes(ParseInfo info) #XMLAttributesImpl :
{
	DerivedColumnImpl expression = null;
	ArrayList<DerivedColumnImpl> args = new ArrayList<DerivedColumnImpl>(2);
}
{
 	<XMLATTRIBUTES> <LPAREN>
	expression = derivedColumn(info)
	{
		args.add(expression);
	}
	(<COMMA> expression=derivedColumn(info)
	 {
		args.add(expression);
	 }
	)*
	<RPAREN>  		
	{
	   jjtThis.setArgs(args);
	   return jjtThis;
	}
}

/*
name=json object
description=Produces a JSON object containing name value pairs.
example={code:sql}JSONOBJECT(col1 AS val1, col2 AS val2){code}
*/
JSONObjectImpl jsonObject(ParseInfo info) #JSONObjectImpl :
{
	ArrayList<DerivedColumnImpl> args = null;
}
{
 	<JSONOBJECT> <LPAREN>
 	args = derivedColumnList(info)
 	<RPAREN>  		
	{
	    jjtThis.setArgs(args);
		return jjtThis;
	}
}

/*
name=derived column list
description=a list of name value pairs
example={code:sql}col1 AS val1, col2 AS val2{code}
*/
ArrayList<DerivedColumnImpl> derivedColumnList(ParseInfo info) :
{
	DerivedColumnImpl expression = null;
	ArrayList<DerivedColumnImpl> args = new ArrayList<DerivedColumnImpl>(2);
}
{
	expression = derivedColumn(info)
	{
		args.add(expression);
	}
	(<COMMA> expression=derivedColumn(info)
	 {
		args.add(expression);
	 }
	)*
	{ 
		return args;
	}
}

/*
name=xml forest
description=Produces an element for each derived column.
example={code:sql}XMLFOREST(col1 AS ELEM1, col2 AS ELEM2){code}
*/
XMLForestImpl xmlForest(ParseInfo info) #XMLForestImpl :
{
	DerivedColumnImpl expression = null;
	XMLNamespacesImpl xmlNamespaces = null;
	ArrayList<DerivedColumnImpl> args = null;
}
{
 	<XMLFOREST> <LPAREN>
	[
		xmlNamespaces = xmlNamespaces(info) <COMMA>
	]
	args = derivedColumnList(info)
	<RPAREN>  		
	{
		jjtThis.setArguments(args);
		jjtThis.setNamespaces(xmlNamespaces);
		return jjtThis;
	}
}

/*
name=xml namespaces
description=Defines XML namespace URI/prefix combinations
example={code:sql}XMLNAMESPACES('http://foo' AS foo){code}
*/
XMLNamespacesImpl xmlNamespaces(ParseInfo info) #XMLNamespacesImpl :
{
	List<NamespaceItem> namespaces = new ArrayList<NamespaceItem >(2);
	NamespaceItem item = null;
}
{
 	<XMLNAMESPACES> <LPAREN>
	item = namespaceItem()
	{
		namespaces.add(item);
	}
	(<COMMA> item = namespaceItem()
	 {
		 namespaces.add(item);
	 }
	)*
	<RPAREN>
	{
	    jjtThis.setNamespaces(namespaces);
	    return jjtThis;
	}
}

/*
name=xml namespace element
description=An xml namespace
example={code:sql}NO DEFAULT{code}
*/
NamespaceItem namespaceItem() :
{
	String uri = null;
	String prefix = null;
}
{
	(
		uri = stringVal() <AS> prefix = id(null)
		{
			return new NamespaceItem(uri, prefix);
		}
	) | (
		<NO> <DEFAULT_KEYWORD>
		{
			return new NamespaceItem();
		}
	) | (
		<DEFAULT_KEYWORD> uri = stringVal()
		{
			return new NamespaceItem(uri);
		}
	)
}

/*
name=simple data type
description=A non-collection data type.
example={code:sql}STRING{code}
*/
ParsedDataType parseDataTypePrimary() :
{
	Token typeToken = null;
	Integer length = null;
	Integer scale = null; 
	boolean precision = true;
}
{
	(
		(typeToken = <STRING> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} ) |
		(typeToken = <VARCHAR> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} ) | 
		typeToken = <BOOLEAN> | 
		typeToken = <BYTE> | 
		typeToken = <TINYINT> |
		typeToken = <SHORT> | 
		typeToken = <SMALLINT> |
		(typeToken = <CHAR> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} ) | 
		typeToken = <INTEGER> | 
		typeToken = <LONG> | 
		typeToken = <BIGINT> |
		(typeToken = <BIGINTEGER> [<LPAREN>length=intVal()<RPAREN>]) | 
		typeToken = <FLOAT> |
		typeToken = <REAL> | 
		typeToken = <DOUBLE> | 
		(typeToken = <BIGDECIMAL> [<LPAREN>length=intVal()[<COMMA>scale=intVal()]<RPAREN>])|
		(typeToken = <DECIMAL> [<LPAREN>length=intVal()[<COMMA>scale=intVal()]<RPAREN>])| 
		typeToken = <DATE> | 
		typeToken = <TIME> |
		typeToken = <TIMESTAMP> |
		(typeToken = <OBJECT> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} )|
		(typeToken = <BLOB> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} )|
		(typeToken = <CLOB> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} )|
		(typeToken = <VARBINARY> ([<LPAREN>length=intVal()<RPAREN>]) {precision = false;} ) |
		typeToken = <XML>
		
	)
	{
	    String typeName = typeToken.image;
		if (scale != null){
			return new ParsedDataType(typeName, length, scale, precision);
		}
		else if (length != null){
			return new ParsedDataType(typeName, length, precision);
		}
		return new ParsedDataType(typeName);
	}
}

/*
name=data type
description=A data type.
example={code:sql}STRING[]{code}
*/
ParsedDataType parseDataType() :
{
    int arraySuffixes = 0;
    ParsedDataType type = null;
}
{
    type = parseDataTypePrimary()
    (<LSBRACE><RSBRACE> {requiresVersionAtLeast(Version.TEIID_8_5); arraySuffixes++;})*
    {
        if (arraySuffixes > 0) {
           type.setType(type.getType() + StringUtil.join(Collections.nCopies(arraySuffixes, "[]"), ""));
        }
        return type;
    }
}

/*
name=time interval
description=A time interval keyword.
example={code:sql}SQL_TSI_HOUR{code}
*/
ConstantImpl intervalType() : 
{
	Token type = null;
}
{
	(
		type = <SQL_TSI_FRAC_SECOND>
	   |type = <SQL_TSI_SECOND>
	   |type = <SQL_TSI_MINUTE>
	   |type = <SQL_TSI_HOUR>
	   |type = <SQL_TSI_DAY>
	   |type = <SQL_TSI_WEEK>
	   |type = <SQL_TSI_MONTH>
	   |type = <SQL_TSI_QUARTER>
	   |type = <SQL_TSI_YEAR>
	)
	{
		return constant(type.image);
	}
}

/*
name=non numeric literal
description=An escaped or simple non numeric literal.
example={code:sql}'a'{code}
*/
ConstantImpl nonNumericLiteral() :
{
    Token t = null;
    String strVal = "";
    DefaultDataTypeManager.DefaultDataTypes escapeType = null;
    ConstantImpl constant = null;
}
{
	(	
		strVal=stringVal()	{ 
			constant = constant(strVal, DefaultDataTypeManager.DefaultDataTypes.STRING);
		} |
		t=<BINARYSTRINGVAL> { constant = constant(new BinaryTypeImpl(javax.xml.bind.DatatypeConverter.parseHexBinary(t.image.substring(2, t.image.length() - 1))), DefaultDataTypeManager.DefaultDataTypes.VARBINARY); } |
		t=<FALSE>    { constant = constant(Boolean.FALSE, DefaultDataTypeManager.DefaultDataTypes.BOOLEAN); } |
		t=<TRUE>     { constant = constant(Boolean.TRUE, DefaultDataTypeManager.DefaultDataTypes.BOOLEAN); }  |
        t=<UNKNOWN>  { constant = constant(null, DefaultDataTypeManager.DefaultDataTypes.BOOLEAN); }       |
        t=<NULL>     { constant = constant(null); }          |
        
        ( <ESCAPEDTYPE> { 
            String image = getToken(0).image; 
        	if (StringUtil.endsWithIgnoreCase(image, "b")) {
        		escapeType=DefaultDataTypeManager.DefaultDataTypes.BOOLEAN;
        	} else if (StringUtil.endsWithIgnoreCase(image, "ts")) {
        		escapeType=DefaultDataTypeManager.DefaultDataTypes.TIMESTAMP;
        	} else if (StringUtil.endsWithIgnoreCase(image, "d")) {
        		escapeType=DefaultDataTypeManager.DefaultDataTypes.DATE;
        	} else {
        		escapeType=DefaultDataTypeManager.DefaultDataTypes.TIME;
        	}
		  } strVal=stringVal() { 
	        	try {
	        		constant = constant(getDataTypeService().transformValue(strVal, escapeType), escapeType);
	        	} catch (Exception e) {
	        		throw new ParseException(e.getMessage());
	        	}
	        } <RBRACE> )

	)
	{
		return constant;
	}
}

/*
name=unsigned numeric literal
description=An unsigned numeric literal value.
example={code:sql}1.234{code}
*/
ConstantImpl unsignedNumericLiteral(String strVal) :
{
    Token t = null;
}
{
		(t=<UNSIGNEDINTEGER> 	{ 
			try { 
			    strVal = prependSign(strVal, t.image);
				// First try as integer - this should nearly always work
				return constant(Integer.valueOf(strVal), DefaultDataTypeManager.DefaultDataTypes.INTEGER); 				
			} catch(NumberFormatException e1) { 
				try { 
					// Second try as a long
					return constant(Long.valueOf(strVal), DefaultDataTypeManager.DefaultDataTypes.LONG);
				} catch(NumberFormatException e2) {
					try {
						// Third try as a biginteger
						return constant(new BigInteger(strVal), DefaultDataTypeManager.DefaultDataTypes.BIG_INTEGER);
					} catch(NumberFormatException e3) {
						Object[] params = new Object[] { strVal };
						throw new ParseException(Messages.getString(Messages.TeiidParser.Integer_parse, params));
					}
				}
			}			
		}	| t=<FLOATVAL>	{ 
		    strVal = prependSign(strVal, t.image);
			try { 
				return constant(Double.valueOf(strVal), DefaultDataTypeManager.DefaultDataTypes.DOUBLE); 
			} catch(NumberFormatException e) {
				Object[] params = new Object[] { strVal };
				throw new ParseException(Messages.getString(Messages.TeiidParser.Float_parse, params));
			}
		}  | t=<DECIMALVAL>	{ 
     		strVal = prependSign(strVal, t.image);
			try { 
			    if (getDataTypeService().isDecimalAsDouble()) {
			    	return constant(Double.valueOf(strVal), DefaultDataTypeManager.DefaultDataTypes.DOUBLE);
				} else {
			    	return constant(new java.math.BigDecimal(strVal), DefaultDataTypeManager.DefaultDataTypes.BIG_DECIMAL); 
				}
			} catch(NumberFormatException e) {
				Object[] params = new Object[] { t.image };
				throw new ParseException(Messages.getString(Messages.TeiidParser.decimal_parse, params));
			}
		} )
}

/*
unused=true
*/
 void parseMetadata(MetadataFactory factory) :
{
}
{
    (ddlStmt(factory))*
    <EOF>     
}

/*
name=ddl statement
description=A data definition statement.
example={code:sql}CREATE FOREIGN TABLE X (Y STRING){code}
index=true
*/
void ddlStmt(MetadataFactory factory) :
{
	CommandImpl command = null; 
}
{
	(LOOKAHEAD(3) 	createTable(factory) | 
	 LOOKAHEAD(4)	createDDLProcedure(factory, ParseInfo.DEFAULT_INSTANCE) |
	 LOOKAHEAD(2)	createNameSpace(factory) |
	 LOOKAHEAD(4)	alterStatement(factory) |
	 LOOKAHEAD(4) 	command=createTrigger(ParseInfo.DEFAULT_INSTANCE)
	 {
	 	createDDLTrigger(factory, (AlterTriggerImpl)command);
	 }
	)
	[<SEMICOLON>]
}

/*
name=option namespace
description=A namespace used to shorten the full name of an option key.
example={code:sql}SET NAMESPACE 'http://foo' AS foo{code}
*/
void createNameSpace(MetadataFactory factory) :
{
	String uri = null;
	String prefix = null;
}
{ 
	<SET> <NAMESPACE> uri = stringVal() <AS> prefix = id(Boolean.FALSE)
	{
		factory.addNamespace(prefix, uri);
	}
}

/*
name=create procedure
description=Defines a procedure or function invocation.
example={code:sql}CREATE FOREIGN PROCEDURE proc (param STRING) RETURNS STRING{code}
*/
CreateProcedureCommandImpl createDDLProcedure(MetadataFactory factory, ParseInfo info) :
{
	boolean virtual = true;
	boolean function = false;
	Procedure proc = null;
	String procName = null;
    CreateProcedureCommandImpl procCmd = createASTNode(ASTNodes.CREATE_PROCEDURE_COMMAND);
    StatementImpl stmt = null; 	
    ParsedDataType returnDataType = null;
    Token comment = null;    
}
{
	<CREATE> [<VIRTUAL> | <FOREIGN> {virtual = false;}] (<PROCEDURE> | <FUNCTION> {function = true;})
	//the below is optional beacuse to allow the designer based metadata
	(	procName = id(null)
		{
			proc = factory.addProcedure(procName);
		}
	
		<LPAREN>
		[procedureParameter(factory, proc)
		(<COMMA> procedureParameter(factory, proc))*]	
		<RPAREN>
		
		[<RETURNS> (([<TABLE>] <LPAREN>
	        procedureRsColumn(factory, proc)
	        (<COMMA> procedureRsColumn(factory, proc))*
	    <RPAREN>)
	     |
	     returnDataType = parseDataType())
	    ]
	    [ optionsClause(proc, factory)
		   {
		      setProcedureOptions(proc);
		   }
		]
		[<AS> { comment = getToken(1).specialToken; } 
		stmt = statement(info)])
		{
			proc.setVirtual(virtual);
			proc.setFunction(function);
			if (stmt != null){
			    if (function || !virtual) {
			         throw new ParseException(Messages.getString(Messages.TeiidParser.function_def, procName));
			    }
				proc.setQueryPlan((comment != null?comment.image+" ":"") + stmt.toString());
			}
			
	        if (returnDataType != null){
				addProcColumn(factory, proc, "return", returnDataType, false);
	        }
	        if (function) {
	        	replaceProcedureWithFunction(factory, proc);
	        }
	        return procCmd; 		
		}
}

/*
name=procedure parameter
description=A procedure or function parameter
example={code:sql}OUT x INTEGER{code}
*/
void procedureParameter(MetadataFactory factory, Procedure proc) :
{
	String name = null;
	ParsedDataType type = null;
	ProcedureParameter.Type ppType = ProcedureParameter.Type.In;
	ProcedureParameter param = null;
	String defaultValue = null;
	boolean notNull = false;
	boolean vararg = false;
}
{
	[LOOKAHEAD(1) ((<IN> {ppType = ProcedureParameter.Type.In ;})
	 |(<OUT> {ppType = ProcedureParameter.Type.Out;})
	 |(<INOUT> {ppType = ProcedureParameter.Type.InOut;})
	 |(<VARIADIC> {ppType = ProcedureParameter.Type.In ; vararg = true;}))]
	name = id(Boolean.TRUE)
	type = parseDataType()
	[<NOT> <NULL> {notNull = true;}]
	[<RESULT>
	  {
	    if (ppType != ProcedureParameter.Type.Out) {
	    	throw new ParseException(Messages.getString(Messages.TeiidParser.param_out, proc.getName(), name));
	    }
	    ppType = ProcedureParameter.Type.ReturnValue;
	  }
	]
	{
		param = factory.addProcedureParameter(name, type.getType(), ppType, proc);
		setTypeInfo(type, param);
		if (notNull) {
			param.setNullType(Column.NullType.No_Nulls);
		}
		if (vararg) {
			param.setVarArg(vararg);
		}			
	}
	[<DEFAULT_KEYWORD> defaultValue = stringVal() {param.setDefaultValue(defaultValue);}]
	[optionsClause(param, factory)
	   {
	      setColumnOptions(param);
	   }
	]	
}

/*
name=procedure result column
description=A procedure result column.
example={code:sql}x INTEGER{code}
*/
void procedureRsColumn(MetadataFactory factory, Procedure proc) :
{
	String name = null;
	ParsedDataType type = null;
	boolean notNull = false;
	BaseColumn column = null; 
}
{
      name = id(Boolean.TRUE)
	  type = parseDataType()
	  {
	  	column = addProcColumn(factory, proc, name, type, true);
	  }
	  [<NOT> <NULL> {column.setNullType(Column.NullType.No_Nulls);}]	  
	  [optionsClause(column, factory)
	   {
	      setColumnOptions(column);
	   }
	  ]
}

/*
name=create table
description=Defines a table or view.
example={code:sql}CREATE VIEW vw AS SELECT 1{code}
*/
void createTable(MetadataFactory factory) :
{
	boolean view = false;
	boolean globalTemp = false;
	String tableName = null;
	Table table = null;
	Token comment = null;
	CommandImpl query = null;
}
{
	<CREATE> (
        (<FOREIGN> <TABLE>) | 
        ([<VIRTUAL>] <VIEW> {view = true;}) |
        (<GLOBAL> <TEMPORARY> <TABLE> { requiresVersionAtLeast(Version.TEIID_8_5); globalTemp = true; view = true;})
    )

	tableName = id(null)
	{
	    table = factory.addTable(tableName);
	    table.setVirtual(view);
	    if (globalTemp) {
          table.setTableType(Table.Type.TemporaryTable);
        }
	}
	(createTableBody(table, factory) | [optionsClause(table, factory)
	   {
	      setTableOptions(table);
	   }
	])
	[<AS> { comment = getToken(1).specialToken; } query = queryExpression(ParseInfo.DEFAULT_INSTANCE)
	  {
		   if (!view || globalTemp) {
     		   throw new ParseException(Messages.getString(Messages.TeiidParser.view_def, table.getName()));
		   }
		   table.setSelectTransformation((comment != null?comment.image+" ":"") + query.toString());	
	  }
	]
}

/*
name=create foreign temp table
description=Defines a foreign temp table
example={code:sql}CREATE FOREIGN TEMPORARY TABLE t (x string) ON z{code}
*/
CreateImpl createForeignTempTable(ParseInfo info) :
{
	Table table = null;
	String tableName = null;
	String model = null;
	MetadataFactory factory = getTempMetadataFactory();
}
{
	<CREATE> [<LOCAL>] <FOREIGN> <TEMPORARY> <TABLE>
	tableName = id(null)
	{
		table = new Table();
		//need to set a dummy/stable uuid
		table.setUUID("tid:0");
		table.setTableType(Table.Type.TemporaryTable);
		table.setName(tableName);
	} 
	createTableBody(table, factory)
	<ON> model = id(null)
	{
		CreateImpl create = createASTNode(ASTNodes.CREATE);
		create.setTableMetadata(table);
		create.setOn(model);
		return create;
	}
}

/*
name=create table body
description=Defines a table.
example={code:sql}(x string) OPTIONS (CARDINALITY 100){code}
*/
void createTableBody(Table table, MetadataFactory factory) :
{
	String name = null;
	AbstractMetadataRecord constraint = null;
}
{
	<LPAREN>
    createColumn(factory, table)
    (LOOKAHEAD(3) <COMMA>
      createColumn(factory, table)
    )*	
    (<COMMA>{name=null;} [<CONSTRAINT> name = id(null)] (constraint = primaryKey(factory, table, name) | constraint = constraint(factory, table, name, ParseInfo.DEFAULT_INSTANCE) | constraint = foreignKey(factory, table, name))
       [optionsClause(constraint, factory)
	   {
	      setCommonProperties(constraint, constraint.getProperties());
	   }
	]
    )*
    <RPAREN>    
    [optionsClause(table, factory)
	   {
	      setTableOptions(table);
	   }
	]
	{
		if (table.getColumns() != null && !table.supportsUpdate()) {
			for (Column c : table.getColumns()) {
				c.setUpdatable(false);
			}
		}
	}
}

/*
name=foreign key
description=Defines the foreign key referential constraint.
example={code:sql}FOREIGN KEY (a, b) REFERENCES tbl (x, y){code}
*/
AbstractMetadataRecord foreignKey(MetadataFactory factory, Table table, String name) :
{
	List<String> columnNames = null;
	String viewName = null;
	Table reference = null;
	KeyRecord pk = null;
	Column column = null;
	List<String> pkColumnNames = null;
	KeyRecord key = null;
}
{
	<FOREIGN> <KEY>
	columnNames = columnList(true, false)
    <REFERENCES>
    viewName = id(null)
    [pkColumnNames = columnList(true, false)]
    {
	    return factory.addForiegnKey(name != null?name:("FK"+table.getForeignKeys().size()), columnNames, pkColumnNames, viewName, table);   
    }
}

/*
name=primary key
description=Defines the primary key.
example={code:sql}PRIMARY KEY (a, b){code}
*/
AbstractMetadataRecord primaryKey(MetadataFactory factory, Table table, String name) :
{
	List<String> columnNames = null;
	Column column = null;
	KeyRecord key = null;
}
{
	<PRIMARY> <KEY>
	columnNames = columnList(true, false)
    {
	    if (table.getPrimaryKey() != null){
	    	throw new ParseException(Messages.getString(Messages.TeiidParser.pk_exists, table.getName()));
	 	}
 		return factory.addPrimaryKey(name!=null?name:"PK", columnNames, table);
    }
}

/*
name=other constraints
description=Defines ACCESSPATTERN and UNIQUE constraints and INDEXes. 
example={code:sql}UNIQUE (a){code}
*/
AbstractMetadataRecord constraint(MetadataFactory factory, Table table, String name, ParseInfo info) :
{
	KeyRecord keyrecord = null;
	Column column = null;
	List<String> columnNames = null;
	Token type = null;
	KeyRecord key = null;
	List<BaseExpression> expressions = null;
}
{
	(( type = <UNIQUE> | type = <ACCESSPATTERN>)
	columnNames = columnList(true, false)	    
	{
		if (type.image.equalsIgnoreCase("UNIQUE")) { 
    		return factory.addIndex(name != null?name:("UNIQUE"+table.getUniqueKeys().size()), false, columnNames, table);
    	} else if (type.image.equalsIgnoreCase("ACCESSPATTERN")) { 
    		return factory.addAccessPattern(name != null?name:("AP"+table.getAccessPatterns().size()), columnNames, table);
    	}
    }) | (
    type = <INDEX>
    <LPAREN>
 	expressions = expressionList(info)
 	<RPAREN>
 	 {
 		return addFBI(factory, expressions, table, name);
 	 }
 	)
}

/*
name=column list
description=A list of column names.
example={code:sql}(a, b){code}
*/
List columnList(boolean validate, boolean asElementSymbols) :
{
	ArrayList list = new ArrayList();
	String id = null;
}
{
	<LPAREN>
	  id = id(validate?Boolean.TRUE:null)
	  {
		if (asElementSymbols) {
			list.add(elementSymbol(id));
		} else {
	  		list.add(id);
	  	}
	  }
	  (<COMMA> id = id(validate?Boolean.TRUE:null)
	   {
		if (asElementSymbols) {
			list.add(elementSymbol(id));
		} else {
	  		list.add(id);
	  	}
	   }
	  )*
	 <RPAREN> 
	 {
	 	return list;
	 }
}

/*
name=table element
description=Defines a table column.
example={code:sql}x INTEGER NOT NULL{code}
*/
void createColumn(MetadataFactory factory, Table table) :
{
	String element = null;
	ParsedDataType type = null;
	boolean autoIncrement = false;
	boolean notNull = false;
	String defalt = null;
	Column column = null;
	List<String> columnName = new ArrayList<String>();
	boolean index = false;
	boolean unique = false;
	boolean pk = false;
	Token word = null;
}
{
	 element = id(Boolean.TRUE)
	 (
       <SERIAL>
       {
         requiresVersionAtLeast(Version.TEIID_8_5);
         type = new ParsedDataType("INTEGER");
         autoIncrement = true;
         notNull = true;
       }
       |
       (
         type = parseDataType()
         [<NOT> <NULL> { notNull = true; }]
         [<AUTO_INCREMENT> {  autoIncrement = true; }]
       )
       {
         column = factory.addColumn(element, type.getType(), table);
         column.setUpdatable(true);
         setTypeInfo(type, column);                
         columnName.add(element);
       }
	 )

	 ((<PRIMARY> <KEY> { pk = true; }) | ([<UNIQUE> { unique = true;  }] [<INDEX> { index = true; }]))
	 [<DEFAULT_KEYWORD> defalt = stringVal() {column.setDefaultValue(defalt);}]
	 [optionsClause(column, factory)
	   {
	      setColumnOptions(column);
	   }
	 ]
	 {
	    if (index){
	 		factory.addIndex("INDEX"+table.getIndexes().size(), true, columnName, table);
	 	} else if (unique){
	 		factory.addIndex("UNIQUE"+table.getIndexes().size(), false, columnName, table);
	 	} else if (pk) {
	    	if (table.getPrimaryKey() != null) {
	    		throw new ParseException(Messages.getString(Messages.TeiidParser.pk_exists, table.getName()));
	    	}
	 		factory.addPrimaryKey("PK", columnName, table);
	 	}

        if (notNull) {
          column.setNullType(Column.NullType.No_Nulls);
        }
	    column.setAutoIncremented(autoIncrement);
	 }
}

/*
name=options clause
description=A list of statement options.
example={code:sql}OPTIONS ('x' 'y', 'a' 'b'){code}
*/
void optionsClause(AbstractMetadataRecord record, MetadataFactory factory) :
{
}
{
  <OPTIONS> <LPAREN>
  optionPair(record, factory) (<COMMA> optionPair(record, factory))*	   
  <RPAREN> 
}

/*
name=option pair
description=An option key/value pair.
example={code:sql}'key' 'value'{code}
*/
void optionPair(AbstractMetadataRecord record, MetadataFactory factory) :
{
	ConstantImpl value = null;
	String key = null;
	Token t = null;
	String strVal = null;
}
{
	 key = id(null)
	 (value = nonNumericLiteral()
	 | [strVal = plusMinus()] value = unsignedNumericLiteral(strVal))
	 { 
	 	key = resolvePropertyKey(factory, key);
	 	String val = null;
	 	if (value.getValue() != null) {
	 		val = value.getValue().toString();
	 	}
	 	record.setProperty(key, val); 
	 } 
}

/*
name=alter options
description=alters options of tables/procedure
example={code:sql}ALTER FOREIGN TABLE foo OPTIONS (ADD cardinality 100){code}
*/
void alterStatement(MetadataFactory factory) :
{
	boolean table = false;
	boolean proc = false;
	boolean func = false;
	String objectName = null;
	AbstractMetadataRecord record = null;
}
{ 
	<ALTER> [<VIRTUAL> | <FOREIGN>] (<TABLE> {table = true;} | <VIEW> {table = true;} | <PROCEDURE> {proc=true;})
	objectName = id(null)
	{
		if (table){
			record = factory.getSchema().getTable(objectName);
			if (record == null){
				throw new ParseException(Messages.getString(Messages.TeiidParser.alter_table_doesnot_exist, objectName));
			}
		}
		if (proc){
			record = factory.getSchema().getProcedure(objectName);
			if (record == null){
				throw new ParseException(Messages.getString(Messages.TeiidParser.alter_procedure_doesnot_exist, objectName));
			}
		}		
	}
	
	(alterOptionsList(record, factory) | 
	 alterColumn(record, factory))
}

/*
name=alter options list
description=a list of alterations to options
example={code:sql}OPTIONS (ADD updatable true){code}
*/
void alterOptionsList(AbstractMetadataRecord record, MetadataFactory factory) :
{

}
{
  <OPTIONS> <LPAREN>
  (addSetOptionImpl(record, factory) |
   dropOptionImpl(record))
  (<COMMA> (addSetOptionImpl(record, factory) |
   dropOptionImpl(record)))*
  <RPAREN>
  {
 		setOptions(record);
  }
}

/*
name=drop option
description=drop option
example={code:sql}DROP updatable{code}
*/
void dropOptionImpl(AbstractMetadataRecord record) :
{
	String key = null;
}
{
   <DROP> key = id(null) 
   {
 		removeOption(key, record);
   }
}

/*
name=add set option
description=add or set an option pair
example={code:sql}ADD updatable true{code}
*/
void addSetOptionImpl(AbstractMetadataRecord record, MetadataFactory factory) :
{
}
{
   (<ADD>|<SET>) optionPair(record, factory) 
}

/*
name=alter column options
description=alters a set of column options
example={code:sql}ALTER COLUMN bar OPTIONS (ADD updatable true){code}
*/
void alterColumn(AbstractMetadataRecord parent, MetadataFactory factory) :
{
	boolean param = false;
	String objectName = null;
	AbstractMetadataRecord record = null;
	String key = null;
}
{ 
	<ALTER> [<COLUMN>|<PARAMETER>{param=true;}]
	objectName = id(null)
	{
		record = getChild(objectName, parent, param);
	}
	alterOptionsList(record, factory)
}

AssignmentStatementImpl assignmentStatement(ElementSymbolImpl elementSymbol, BaseLanguageObject value) #AssignmentStatementImpl :
{
}
{
    {
        jjtThis.setVariable(elementSymbol);

        if (value instanceof BaseExpression)
            jjtThis.setExpression((BaseExpression) value);
        else if (value instanceof QueryCommandImpl)
            jjtThis.setExpression(scalarSubquery((QueryCommandImpl) value));
        else
            jjtThis.setCommand((CommandImpl) value);

        return jjtThis;
    }
}

ScalarSubqueryImpl scalarSubquery(QueryCommandImpl queryCommand) #ScalarSubqueryImpl :
{
}
{
    {
        jjtThis.setCommand(queryCommand);
        return jjtThis;
    }
}

GroupSymbolImpl groupSymbol(String... args) #GroupSymbolImpl :
{
}
{ 
    {
        /*
         * Expectation is that group symbol args should be
         * name then definition (or alias).
         */
        jjtThis.setName(args[0]);
        if (args.length == 2)
            jjtThis.setDefinition(args[1]);

        return jjtThis;
    }
}

ConstantImpl constant(Object... args) #ConstantImpl :
{
}
{ 
    {
        if (args == null)
            return jjtThis;

        /*
         * Expectation is that constant args should be
         * value of type Object and type of type Class.
         */
        for (Object arg : args) {
            if (arg instanceof Class) {
                jjtThis.setType((Class) arg);
            } else if (arg instanceof DefaultDataTypeManager.DefaultDataTypes) {
                DefaultDataTypeManager.DefaultDataTypes dataType = (DefaultDataTypeManager.DefaultDataTypes) arg;
                jjtThis.setType(dataType.getTypeClass());
            } else {
                jjtThis.setValue(arg);
            }
        }
        return jjtThis;
    }
}

ElementSymbolImpl elementSymbol(String name) #ElementSymbolImpl :
{
}
{ 
    {
        jjtThis.setName(name);
        return jjtThis;
    }
}

BlockImpl block() #BlockImpl :
{
}
{
    {
        return jjtThis;
    }
}

BlockImpl asBlock(StatementImpl stmt) :
{
  BlockImpl b = null;
}
{
    {
        if (stmt == null)
            return null;

        if (stmt instanceof BlockImpl)
            return (BlockImpl) stmt;

        b = block();
        b.addStatement(stmt);
        return b;
    }
}

ExpressionCriteriaImpl expressionCriteria(BaseExpression expression) #ExpressionCriteriaImpl :
{
}
{
    {
        jjtThis.setExpression(expression);
        return jjtThis;
    }
}

AliasSymbolImpl aliasSymbol(String alias, BaseExpression expression) #AliasSymbolImpl :
{
}
{
    {
        jjtThis.setName(alias);
        jjtThis.setSymbol(expression);
        return jjtThis;
    }
}

BaseAggregateSymbol newBaseAggregateSymbol(String name, boolean isDistinct, BaseExpression[] arguments) #BaseAggregateSymbol :
{
}
{
    {
        jjtThis.setName(name);
        jjtThis.setDistinct(isDistinct);
        jjtThis.setArgs(arguments);
        return jjtThis;
    }
}

BaseWindowFunction windowFunction() #BaseWindowFunction :
{
}
{
    {
        return jjtThis;
    }
}

WindowSpecificationImpl newWindowSpecificationImpl() #WindowSpecificationImpl :
{
}
{
    {
        return jjtThis;
    }
}

TextLineImpl textLine() #TextLineImpl :
{
}
{
    {
        return jjtThis;
    }
}

AlterTriggerImpl alterTrigger() #AlterTriggerImpl :
{
}
{
    {
        return jjtThis;
    }
}

AlterProcedureImpl alterProcedure() #AlterProcedureImpl :
{
}
{
    {
        return jjtThis;
    }
}

AlterViewImpl alterView() #AlterViewImpl :
{
}
{
    {
        return jjtThis;
    }
}

ArraySymbolImpl array() #ArraySymbolImpl :
{
}
{
    {
        return jjtThis;
    }
}